二刷：
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        HashSet<List<Integer>> set = new HashSet<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length-2; i++) {
            while (i > 0 && i < nums.length && nums[i] == nums[i-1]) {   //因为之前有sort,可以这样去重
                i++;
            }  
            int l = i+1, r = nums.length-1;
            while (l < r) {
                List<Integer> ans = new ArrayList<>();
                
                if (nums[l] + nums[r] + nums[i] == 0) {
                    ans.add(nums[l]);
                    ans.add(nums[r]);
                    ans.add(nums[i]);
                    set.add(ans);
                    l++;
                    r--;
                    while (l < r && nums[l] == nums[l-1]) l++;  //这里为啥是low-1, high+1, 因为上面已经low++ high--了，运行过后相当于当前（low-1）的和下一个(low)比较。
                    while (l < r && nums[r] == nums[r+1]) r--;
                } else if (nums[l] + nums[r] + nums[i] < 0) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        res.addAll(set);
        
        return res;
    }
}


1. sort + 2 pointer： O(n^2)
优化：
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        HashSet<List<Integer>> set = new HashSet<>();
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length-2; i++) {
            int low = i+1, high = nums.length-1;
            while (low < high) {
                if (nums[low] + nums[high] + nums[i] == 0) {
                    set.add(Arrays.asList(nums[low], nums[high], nums[i]));
                    low++;
                    high--;
                    
                    //为了避免重复，仅在确认发现了一组解之后再移动left和right指针略过重复项。不要先略过重复项再判断是否解成立。
                    while (low < high && nums[low] == nums[low-1]) low++;  //这里为啥是low-1, high+1, 因为上面已经low++ high--了，运行过后相当于当前（low-1）的和下一个(low)比较。
                    while (low < high && nums[high] == nums[high+1]) high--;
                    
                } else if (nums[low] + nums[high] + nums[i] > 0) {
                    high--;
                } else {
                    low++;
                }
            }
            while (i+1 < nums.length && nums[i] == nums[i+1]) i++;  //确定了以上的loop之后，再略过最外层的重复项。i没有变化（像low high++--）所以就是正常的逻辑，当前的（i）和下一个(i+1)比较。
        }
        res.addAll(set);
        return res;
    }
}



class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        int len = nums.length;
        HashSet<List<Integer>> set = new HashSet<>();
        Arrays.sort(nums);
        for (int i = 0; i < len-2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i-1])) { //最外层循环也注意去重。
                int low = i+1;
                int high = len-1;
                while (low < high) {
                    if (nums[i] + nums[low] + nums[high] == 0) {
                        set.add(Arrays.asList(nums[i] , nums[low] , nums[high]));
                        low++;
                        high--;
                        while (low < high && nums[low-1] == nums[low]) low++; // 防止dup  
                        while (low < high && nums[high+1] == nums[high]) high--; // 防止dup 
                    } else if (nums[i] + nums[low] + nums[high] > 0) {
                        high--;
                    } else {
                        low++;
                    }
                }
            }
        }
        res.addAll(set);
        return res;
    }
}

2. 建立一个two sum function,本质和1是一样的，但是可以重用，很好！
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length < 3){
            return res;
        }
        Arrays.sort(nums); // 先排序
        HashSet<List<Integer>> set = new HashSet<>();
        for(int i = 0; i < nums.length - 2; i++){
            if(i == 0 || (i > 0 && nums[i] != nums[i - 1])){
                twoSum(set, nums, i);
            }
        }
        res.addAll(set);
        return res;
    }
    
    private void twoSum(HashSet<List<Integer>> set, int[] nums, int i){
        int left = i + 1;
        int right = nums.length - 1;
        int sum = 0;
        while (left < right) {
            sum = nums[i] + nums[left] + nums[right];
            if (sum < 0) {
                left++;
            } else if (sum > 0) {
                right--;
            } else if (sum == 0) {
                set.add(Arrays.asList(nums[i], nums[left], nums[right]));
                left++;
                right--;
            }
        }
    }
}

3. 暴力解法 3个for
错误！我不知道怎么去重。。结果：
[[-1,-1,2],[0,-1,1],[1,-1,0],[2,-1,-1],[2,-4,2],[-4,2,2],[-1,2,-1],[2,2,-4],[-1,1,0],[0,1,-1],[-1,0,1],[0,0,0],[1,0,-1]]
没有很好的办法。
所以最好别暴力。

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        Arrays.sort(nums);
        
        HashMap<Integer, Integer> map = new HashMap<>(); // key: nums[i], value: index
        HashSet<List<Integer>> set = new HashSet<>(); // check dup triplet in res.
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                for (int k = 0; k < nums.length; k++) {
                    if (nums[i] + nums[j] + nums[k] == 0) {
                        set.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    }
                }
            }
        }
        res.addAll(set);
        return res;
    }
}
