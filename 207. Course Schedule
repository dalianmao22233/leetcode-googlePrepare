https://blog.csdn.net/zjuPeco/article/details/78981634
一个没有环的有向图
BFS的算法思想是拓扑排序：从外围往核心进发。我们每次在图中找入度为0的点，然后移除。如果最后没有入度为0的点，但是图中仍有点存在，那么这些剩下来的点一定是交错成环的。
https://github.com/wisdompeak/LeetCode/tree/master/BFS/207.Course-Schedule
我们将依赖关系表述成一条有向边。课程a需要先修课程b，那么就有一条边从a指向b。本题的本质就是在一个有向图中判断是否有环。如果有环，意味着循环依赖，就需要返回false。

在图论中，判断有向图是否有环，一般有DFS和BFS两种做法。



class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        for (int[] pair: prerequisites) {
            indegree[pair[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        
        while (!queue.isEmpty()) {
            numCourses--;
            int temp = queue.poll();
            for (int[] pair: prerequisites) {
                if (pair[1] == temp) {
                    indegree[pair[0]]--;
                    if (indegree[pair[0]] == 0) {
                        queue.offer(pair[0]);
                    }
                }
            }
        } 
        return numCourses == 0;
    }
}
