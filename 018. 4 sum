
https://github.com/wisdompeak/LeetCode/tree/master/Two_Pointers/018.4Sum
按照3sum的思路来做4sum，需要nnn*log(n)的时间复杂度。
需要注意必要的剪枝来减少计算量。比如第一层循环

for (int h1=0; h1<nums.size(); h1++)
{
   if (nums[h1]*4>target) break;
   if (nums[h1]+nums.back()*3<target) continue;
}
类似的第二层循环

for (int h2=0; h2<nums.size(); h2++)
{
   if (nums[h1]+3*nums[h2]>target) break;
   if (nums[h1]+nums[h2]+nums.back()*2<target) continue;
}
对于第三层循环

int left=h2+1;
int right=nums.size()-1;
if (nums[h1]+nums[h2]+2*nums[left]>target) break;
if (nums[h1]+nums[h2]+2*nums[right]<target) continue;
对于h1(h2)避免重复元素的操作


if (h1>0 && nums[h1]==nums[h1-1]) continue;

=================================================================
以上思想实现：
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4) return res;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] * 4 > target) break;
            if (nums[i] + nums[nums.length-1] * 3 < target) continue;
            if (i > 0 && nums[i] == nums[i-1]) {
                continue;
            }
	    // 以上三个都是去重
            for (int j = i+1; j < nums.length; j++) {
                if (nums[i] + nums[j]*3 > target) break;
                if (nums[i] + nums[j] + nums[nums.length-1] * 2 < target) continue;
                if (j > i+1 && nums[j] == nums[j-1]) {
                    continue;
                }
                // 以上三个都是去重
                int low = j+1;
                int high = nums.length-1;
                
                if (low < nums.length) {
                    if (nums[i] + nums[j] + nums[low] * 2 > target) break;
		    // 以上是去重
                    while (low < high) {

                        if (nums[i] + nums[j] + nums[low] +  nums[high] == target) {
                            res.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                            low++;
                            high--;

                            while (low < high && nums[low] == nums[low-1]) low++;
                            while (low < high && nums[high] == nums[high+1]) high--;
			    // 以上2个都是去重
                        } else if (nums[i] + nums[j] + nums[low] +  nums[high] < target) {
                            low++;
                        } else   {
                            high--;
                        }

                    }
                }
            }
        }
        return res;
        
    }
}

2.
from laioffer:
sort first!!!

import java.util.*;
public class threeSum {
	public static List<List<Integer>> fourSum(int[] nums, int target) {
		List<List<Integer>> res = new ArrayList<>();
		if (nums == null || nums.length == 0) {
			return res;
		}
		Arrays.sort(nums);
		HashMap<Integer, Pair> map = new HashMap<>(); // key: 2sum result, value: pair of 2 sum index i and j
		for (int j = 1; j < nums.length; j++) {
			for (int i = 0; i < j; i++) {
				int pairSum = nums[i] + nums[j];
				if (map.containsKey(target-pairSum) && map.get(target-pairSum).right < i) {
					res.add(Arrays.asList(map.get(target-pairSum).left, map.get(target-pairSum).right, i, j));
					return res;
				}
				if (!map.containsKey(pairSum)) {
					map.put(pairSum, new Pair(i, j));
				}
			}
		}
		return res;
	}

	public static void main(String[] args) {
		int[] nums = new int[]{1,2,3,4,5};
		System.out.println(fourSum(nums, 10));
	}
}
class Pair {
	public int left;
	public int right;
	Pair(int left, int right) {
		this.left = left;
		this.right = right;
	}
}
