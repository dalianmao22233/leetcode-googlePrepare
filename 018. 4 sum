
https://github.com/wisdompeak/LeetCode/tree/master/Two_Pointers/018.4Sum
按照3sum的思路来做4sum，需要nnn*log(n)的时间复杂度。
需要注意必要的剪枝来减少计算量。比如第一层循环

for (int h1=0; h1<nums.size(); h1++)
{
   if (nums[h1]*4>target) break;
   if (nums[h1]+nums.back()*3<target) continue;
}
类似的第二层循环

for (int h2=0; h2<nums.size(); h2++)
{
   if (nums[h1]+3*nums[h2]>target) break;
   if (nums[h1]+nums[h2]+nums.back()*2<target) continue;
}
对于第三层循环

int left=h2+1;
int right=nums.size()-1;
if (nums[h1]+nums[h2]+2*nums[left]>target) break;
if (nums[h1]+nums[h2]+2*nums[right]<target) continue;
对于h1(h2)避免重复元素的操作


if (h1>0 && nums[h1]==nums[h1-1]) continue;

=================================================================

1. add a for loop outside 3 sum. 注意avoid dup
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        Arrays.sort(nums);
        HashSet<List<Integer>> set=  new HashSet<>();
        int len = nums.length;
        for (int i = 0; i < len-3; i++) {
            if (i > 0 && nums[i] == nums[i-1]) continue; // 防止dup
            // if (i == 0 || (i > 0 && nums[i] != nums[i-1])) { // 防止dup, same as above line
                for (int j = i+1; j < len-2; j++) {
                    if (j > i+1 && nums[j] == nums[j-1]) continue; // 防止dup
                    // if (j == i+1 || (j > i+1 && nums[j] != nums[j-1])) { // same as above line
                        System.out.println("test!");
                        int high = len-1;
                        int low = j+1;
                        while (low < high) {
                            if (nums[j] + nums[low] + nums[high] == target-nums[i]) {
                                set.add(Arrays.asList(nums[i], nums[j] , nums[low] , nums[high]));
                                high--;
                                low++;
                                while (low < high && nums[low-1] == nums[low]) low++; // 防止dup, 没有也没事
                                while (low < high && nums[high+1] == nums[high]) high--; // 防止dup, 没有也没事
                            } else if (nums[j] + nums[low] + nums[high] > target-nums[i]){
                                high--;
                            } else {
                                low++;
                            }
                        }
                    // }
                }
            // }
        }
        res.addAll(set);
        return res;
    }
}

2.
from laioffer:
sort first!!!

import java.util.*;
public class threeSum {
	public static List<List<Integer>> fourSum(int[] nums, int target) {
		List<List<Integer>> res = new ArrayList<>();
		if (nums == null || nums.length == 0) {
			return res;
		}
		Arrays.sort(nums);
		HashMap<Integer, Pair> map = new HashMap<>(); // key: 2sum result, value: pair of 2 sum index i and j
		for (int j = 1; j < nums.length; j++) {
			for (int i = 0; i < j; i++) {
				int pairSum = nums[i] + nums[j];
				if (map.containsKey(target-pairSum) && map.get(target-pairSum).right < i) {
					res.add(Arrays.asList(map.get(target-pairSum).left, map.get(target-pairSum).right, i, j));
					return res;
				}
				if (!map.containsKey(pairSum)) {
					map.put(pairSum, new Pair(i, j));
				}
			}
		}
		return res;
	}

	public static void main(String[] args) {
		int[] nums = new int[]{1,2,3,4,5};
		System.out.println(fourSum(nums, 10));
	}
}
class Pair {
	public int left;
	public int right;
	Pair(int left, int right) {
		this.left = left;
		this.right = right;
	}
}
