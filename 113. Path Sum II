1. recursive: 我第一次写只能写对一多半。加油
// time: O(N^2)， visit each node -> O(n), and  copy numbers to a new list, which can take up to O(n) time.

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) return res;
        dfs(res, new ArrayList<Integer>(), root, targetSum);
        return res;
    }
    public void dfs(List<List<Integer>> res, List<Integer> ans, TreeNode root, int targetSum) {
        if (root == null) {
            return;
        }
        ans.add(root.val);
        if (root.left == null && root.right == null && targetSum == root.val) {
            res.add(new ArrayList<>(ans));
            // 如果在这里就return了，会导致没复原，影响其他解结果。
        } else {
            // 还不是根节点，或者没满足sum，继续看左边右边
            dfs(res, ans, root.left, targetSum-root.val);
            dfs(res, ans, root.right, targetSum-root.val);
        }
        // 复原
        // We need to pop the node once we are done processing ALL of its subtrees
        ans.remove(ans.size()-1);
    }
}

2. iterative: 用stack模拟DFS， post-order。
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        int SUM = 0;
        TreeNode cur = root;
        TreeNode pre = null;
        while(cur!=null || !stack.isEmpty()){
            while(cur!=null){
                stack.push(cur);
                path.add(cur.val);
                SUM+=cur.val;
                cur=cur.left;
            }
            cur = stack.peek();
            if(cur.right!=null && cur.right!=pre){
                cur = cur.right;
                continue;
            } 
            if(cur.left==null && cur.right==null && SUM==sum) 
                res.add(new ArrayList<Integer>(path));
  
            pre = cur;
            stack.pop();
            path.remove(path.size()-1);
            SUM-=cur.val;
            cur = null;
        
        }
        return res;
    }
}
