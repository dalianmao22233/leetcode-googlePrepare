1. DFS:
思路：扫描矩阵，如果其中某一个值==‘1’， 那么这就是触发DFS的root node。 
在DFS期间，每个扫描的点都改变值为‘0’，为了标记为visited node. 下一轮当遍历到这个'0'的时候就会break.
这样的话，只要扫到一个1，它周围的1都会变成0，直到没有1为止。由此可以得到岛的数目。 真的好巧妙！！！
最后就返回有多少root node, 就知道有几个岛。
Linear scan the 2d grid map, if a node contains a '1', then it is a root node that triggers a Depth First Search. 
During DFS, every visited node should be set as '0' to mark as visited node. 
Count the number of root nodes that trigger DFS, 
this number would be the number of islands since each DFS starting at some root identifies an island.
Time: O(m*n), Space: worst case: O(m*n), grid map is filled with lands where DFS goes by m*n deep.

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int rows = grid.length;
        int columns = grid[0].length;
        int nums_islands = 0;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                if (grid[r][c] == '1') {
                    nums_islands++;
                    dfs(grid, r, c);
                }
            }
        }
        return nums_islands;
    }
    void dfs(char[][] grid, int r, int c) {
        int rows = grid.length;
        int columns = grid[0].length;
        
        if (r < 0 || c < 0 || r >= rows || c >= columns || grid[r][c] == '0') {
            return;
        }
        grid[r][c] = '0';
        dfs(grid, r-1, c);
        dfs(grid, r+1, c);
        dfs(grid, r, c+1);
        dfs(grid, r, c-1);
    }
}

2. BFS：
思路：扫描矩阵，如果其中某一个值==‘1’， 那么这就是触发BFS的root node。 然后标记visited，遍历邻居。这个比DFS慢很多。
Time: O(m*n), Space:O(min(m, n)), 最差的情况是整个grid都是1, the size of queue can grow up to min(m,n).

class Solution {
  public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) {
      return 0;
    }

    int nr = grid.length;
    int nc = grid[0].length;
    int num_islands = 0;

    for (int r = 0; r < nr; ++r) {
      for (int c = 0; c < nc; ++c) {
        if (grid[r][c] == '1') {
          ++num_islands;
          grid[r][c] = '0'; // mark as visited
          Queue<Integer> neighbors = new LinkedList<>();
          neighbors.add(r * nc + c);
          while (!neighbors.isEmpty()) {
            int id = neighbors.remove();
            int row = id / nc;
            int col = id % nc;
            if (row - 1 >= 0 && grid[row-1][col] == '1') {
              neighbors.add((row-1) * nc + col);
              grid[row-1][col] = '0';
            }
            if (row + 1 < nr && grid[row+1][col] == '1') {
              neighbors.add((row+1) * nc + col);
              grid[row+1][col] = '0';
            }
            if (col - 1 >= 0 && grid[row][col-1] == '1') {
              neighbors.add(row * nc + col-1);
              grid[row][col-1] = '0';
            }
            if (col + 1 < nc && grid[row][col+1] == '1') {
              neighbors.add(row * nc + col+1);
              grid[row][col+1] = '0';
            }
          }
        }
      }
    }

    return num_islands;
  }
}

3. union find (aka Disjoint Set) : https://leetcode.com/articles/redundant-connection/
Traverse the 2d grid map and union adjacent lands horizontally or vertically, 
at the end, return the number of connected components maintained in the UnionFind data structure.
Time: O(m*n), Space: O(m*n), required by UnionFind data structure.
Attention!: Union operation takes essentially constant time when UnionFind is implemented with both path compression and union by rank.

https://www.coursera.org/learn/algorithms-part1/lecture/RZW72/quick-union-improvements  不懂了可以再看一遍视频。

class Solution {
  class UnionFind {
    int count; // # of connected components
    int[] parent;  // 存储当前节点的root
    int[] rank;  // height of subtree

    public UnionFind(char[][] grid) { // for problem 200
      count = 0;
      int m = grid.length;
      int n = grid[0].length;
      parent = new int[m * n];
      rank = new int[m * n];
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (grid[i][j] == '1') {  //  ‘1’：以自己为root
            parent[i * n + j] = i * n + j;
            ++count;
          }
          rank[i * n + j] = 0;
        }
      }
    }

    public int find(int i) { // path compression
      if (parent[i] != i) parent[i] = find(parent[i]);
      return parent[i];
    }

    public void union(int x, int y) { // union with rank
      int rootx = find(x);
      int rooty = find(y);
      if (rootx != rooty) {
        if (rank[rootx] > rank[rooty]) {
          parent[rooty] = rootx;
        } else if (rank[rootx] < rank[rooty]) {
          parent[rootx] = rooty;
        } else {
          parent[rooty] = rootx; 
          rank[rootx] += 1; // 只有当height相同高度的时候更新高度，因为是一个node接到另一个node的下面，多了一层。
        }
        --count;
      }
    }

    public int getCount() {
      return count;
    }
  }

  public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) {
      return 0;
    }

    int nr = grid.length;
    int nc = grid[0].length;
    int num_islands = 0;
    UnionFind uf = new UnionFind(grid);
    for (int r = 0; r < nr; ++r) {
      for (int c = 0; c < nc; ++c) {
        if (grid[r][c] == '1') {
          grid[r][c] = '0';
          if (r - 1 >= 0 && grid[r-1][c] == '1') {
            uf.union(r * nc + c, (r-1) * nc + c);
          }
          if (r + 1 < nr && grid[r+1][c] == '1') {
            uf.union(r * nc + c, (r+1) * nc + c);
          }
          if (c - 1 >= 0 && grid[r][c-1] == '1') {
            uf.union(r * nc + c, r * nc + c - 1);
          }
          if (c + 1 < nc && grid[r][c+1] == '1') {
            uf.union(r * nc + c, r * nc + c + 1);
          }
        }
      }
    }

    return uf.getCount();
  }
}
