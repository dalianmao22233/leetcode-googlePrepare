首选这个：用stringbuilder建立字符串sb: #1#0#0#0#1#0#0#0#0#0#0#0#0#0#0#0#0#0#0#1#0#0#0#0#0#0 ，以此作为map key. 

public class groupAnagram {
	// O(NK), where N is the length of strs, and K is the maximum length of a string in strs. space: O(NK) for map
	public static List<List<String>> groupAnagrams(String[] strs) {
		if (strs.length == 0) {
			return new ArrayList();
		}
		Map<String, List> ans = new HashMap<String, List>();
		int[] count = new int[26];
		for (String s : strs) {
			Arrays.fill(count, 0);  // 每次清空
			for (char c : s.toCharArray()) {
				count[c - 'a']++;
			}

			StringBuilder sb = new StringBuilder("");
			for (int i = 0; i < 26; i++) {
				sb.append('#');
				sb.append(count[i]);
			}
			String key = sb.toString();
			if (!ans.containsKey(key)) {
				ans.put(key, new ArrayList());
			}
			ans.get(key).add(s);
		}
		return new ArrayList(ans.values());
	}


这个也不错，很简洁，就是用了内置的Arrays.sort（）先给每个字符串的字母排序，放map的时候如果遇到相同的就加入List，不同的就put new.
// O(NKlogK), where N is the length of strs, and K is the maximum length of a string in strs. space: O(NK) for map


	public static List<List<String>> groupAnagrams2(String[] strs) {
		if (strs.length == 0) return new ArrayList();
		Map<String, List> ans = new HashMap<String, List>();
		for (String s : strs) {  // N
			char[] ca = s.toCharArray();
			Arrays.sort(ca);  // O(KlogK)
			String key = String.valueOf(ca);
			if (!ans.containsKey(key)) {
				ans.put(key, new ArrayList());
			}
			ans.get(key).add(s);
		}
		return new ArrayList(ans.values());
	}
}
