dfs+backtracking:
用一维数组或者List表示queen的位置：
queen list:[1,3,0,2] 含义：
在index=0 （row=0）， col=1处， 有一个queen。坐标(0, 1). 以此类推 (1,3) (2,0) (3,2)
1 不同行：这个自然满足，数组board下标不同

2 不同列：这个只要使board中各元素值不相同就行了。即board[i]!=board[j]

3 不在同一条斜线：这个只要使board中元素相应的横纵坐标差的绝对值不等就行了。即|board[i]-board[j]|!=|i-j|



public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        backtrack(new ArrayList<Integer>(), ans, n);
        return ans;
    }
    private void backtrack(List<Integer> currentQueen, List<List<String>> ans, int n) {
        // 当前皇后的个数是否等于 n 了，等于的话就加到结果中
        if (currentQueen.size() == n) {
            List<String> temp = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                char[] t = new char[n];
                Arrays.fill(t, '.');
                t[currentQueen.get(i)] = 'Q';
                temp.add(new String(t));
            }
            ans.add(temp);
            return;
        }
        //对于新的一行，尝试每一列
        for (int col = 0; col < n; col++) {
            //当前列是否冲突
            if (!currentQueen.contains(col)) {
                //判断对角线是否冲突
                if (isDiagonalAttack(currentQueen, col)) {
                    continue;
                }
                //将当前列的皇后加入
                currentQueen.add(col);
                //去考虑下一行的情况
                backtrack(currentQueen, ans, n);
                //将当前列的皇后移除，去判断下一列
                //进入这一步就是两种情况，下边的行走不通了回到这里或者就是已经拿到了一个解回到这里
                currentQueen.remove(currentQueen.size() - 1);
            }
        }
    }
    private boolean isDiagonalAttack(List<Integer> currentQueen, int i) {
        int current_row = currentQueen.size(); // 比如list此时size=3, 那么要看index=3（也就是第四行）的queen到底放哪里，非常巧妙
        int current_col = i;
        //判断每一行的皇后的情况
        for (int row = 0; row < currentQueen.size(); row++) {
            //左上角的对角线和右上角的对角线，差要么相等，要么互为相反数，直接写成了绝对值
            //每一行的queen坐标（row, list.get(row)）, 当前要尝试的放置queen的坐标(current_row, current_col)
            if (Math.abs(current_row - row) == Math.abs(current_col - currentQueen.get(row))) {
                return true;
            }
        }
        return false;
    }
}

二刷：
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        if (n == 0) return res;
        dfs(n, new ArrayList<>(), res, 0);
        return res;
    }
    public void dfs(int n, List<Integer> queens, List<List<String>> res, int row) {
        if (row == n) {
        // 停止条件就是过了最后一行
            List<String> ans = new ArrayList<>();
            for (int i  = 0; i< n; i++) {
                char[] t = new char[n];
                Arrays.fill(t, '.');
                t[queens.get(i)] = 'Q';
                ans.add(new String(t));
            }
            res.add(ans);
            return;
        }
        for (int col = 0; col < n ; col++) {  
            if (!queens.contains(col)) { // no conflict in row/col
                if (!isDiagnoticAttack(queens, res, col)) {
                    queens.add(col);
                    //下一行
                    dfs(n, queens, res, row+1);
                    queens.remove(queens.size()-1);
                }
            }
        }
    }
    public boolean isDiagnoticAttack(List<Integer> queens, List<List<String>> res, int col) {
        int current_row = queens.size();
        int current_col = col;
        // queen 坐标: index, queens.get(index)
        for (int index = 0; index < queens.size(); index++) {
            if (Math.abs(current_row - index) == Math.abs(current_col - queens.get(index))) {
                return true;
            }
        }
        return false;
    }
}
