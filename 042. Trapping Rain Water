package GoldmanSaks;
import java.util.*;

public class trappingRainWater {
	public static void main(String[] args) {

		int[] height = new int[]{0,1,0,2,1,0,1,3,2,1,2,1};
		System.out.println(trap(height));
		System.out.println(trap2(height));
	}

	// O(n) time, O(1) space, 2 pointers
	public static int trap(int[] height) {
		if (height == null || height.length == 0) {
			return 0;
		}
		int len = height.length;
		int low = 0, high = len-1, maxLeft = 0, maxRight = 0;
		int res = 0;

		while (low <= high) {
			if (height[low] <= height[high]) {
				if (height[low] < maxLeft) {
					res += maxLeft - height[low];
				} else {
					maxLeft = height[low];
				}
				low++;
			} else {
				if (height[high] < maxRight) {
					res += maxRight - height[high];
				} else {
					maxRight = height[high];
				}
				high--;
			}
		}
		return res;
	}
	
	// O(n) time, O(n) space, DP twice.
	public static int trap2(int[] height) {
		if (height == null || height.length == 0) {
			return 0;
		}
		int len = height.length;
		int[] M1 = new int[len]; // left max
		int[] M2 = new int[len]; // right max

		M1[0] = height[0];
		for (int i = 1; i < len; i++) {
			M1[i] = Math.max(M1[i-1], height[i]);
		}
		M2[len-1] = height[len-1];
		for (int i = len-2; i >= 0; i--) {
			M2[i] = Math.max(M2[i+1], height[i]);
		}

		int sum = 0;
		for (int i = 0; i < len; i++) {
			sum += Math.min(M1[i], M2[i]) - height[i];
		}
		return sum;
	}

}
