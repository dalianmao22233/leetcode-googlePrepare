/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return head;
        }
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode p = dummy; // 为了后面用next串起来。
        RandomListNode cur = head;
        
        while (cur != null) {
            p.next = copyNode(cur);  // 记得要用next串起来。
            cur = cur.next;
            p = p.next;
        }
        return dummy.next;
    }
    public RandomListNode copyNode(RandomListNode node) {
        RandomListNode copy = new RandomListNode(node.label);
        if (node.random != null) {  // 注意这里要判断，不做的话会有NullpointerEX。
            copy.random = new RandomListNode(node.random.label); // 记得这里要新建。
        }
        if (node.next != null) {  // 不加 居然也没错。。
            newNode.next = new RandomListNode(node.next.label); // 记得这里要新建。
        }
        return copy;
    }
}


// hashmap:
public class Solution {
    HashMap<RandomListNode, RandomListNode> visited = new HashMap<>();  // <old, new>
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return head;
        }
        if (this.visited.containsKey(head)) {
            return this.visited.get(head);
        }
        
        RandomListNode node = new RandomListNode(head.label);
        this.visited.put(head, node);
        
        node.next = this.copyRandomList(head.next);
        node.random = this.copyRandomList(head.random);
        
        return node;
    }
}
