DP: 以ObstacleGrid为存储结果（ways）的数组
1.第一个cell（start）为1， 则哪也去不了。直接Return 0；否则set为1 （到达第一个cell用了1）
2.遍历第一行：如果cell==1,则为障碍物，直接set为0；否则set为前一个cell的值，继续往后走。
3.遍历第一列：如果cell==1,则为障碍物，直接set为0；否则set为前一个cell的值，继续往后走。
4.对于每一行每一列，如果cell==1，则为障碍物，直接set为0；否则=左边+上边的ways.


// 没用空间，就是多了两次循环，不够快。好想。
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid == null || obstacleGrid.length == 0) {
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        // first cell is 1, 那就哪也去不了了
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        
        // 到达起始cell的路有1条。
        obstacleGrid[0][0] = 1; 
        
        
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i][0] == 1) {
                // 障碍物，此时reset为0， 不应该contribute to any path
                obstacleGrid[i][0] = 0; 
            } else {
                obstacleGrid[i][0] = obstacleGrid[i-1][0];
            }
        }
        for (int i = 1; i < n; i++) {
            if (obstacleGrid[0][i] == 1) {
                // 障碍物，此时reset为0， 不应该contribute to any path
                obstacleGrid[0][i] = 0; 
            } else {
                obstacleGrid[0][i] = obstacleGrid[0][i-1];
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1];
                } else {
                    obstacleGrid[i][j] = 0;
                }
            }
        }
        return obstacleGrid[m-1][n-1];
    }
}


// 用了一维DP数组，占用空间
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int col = obstacleGrid[0].length;
        int[] dp = new int[col];
        dp[0] = 1;
        for (int[] row: obstacleGrid) {
            for (int j = 0; j < col; j++) {
                if (row[j] == 1) {
                    dp[j] = 0;
                } else if (j > 0) {
                    dp[j] += dp[j-1];
                }
            }
        }
        return dp[width-1];
    }
}
