4. from laioffer: 
class Solution {
    public static String reverseString(String s) {
		if (s.isEmpty()) {
			return s;
		}
		char[] arr = s.toCharArray();
		helper(arr, 0, s.length()-1);
		return String.valueOf(String.valueOf(arr));
	}
	private static void helper(char[] arr, int left, int right) {
		if (left >= right) {
			return;
		}
		swap(arr, left, right);
		helper(arr, left+1, right-1);
	}
	private static void swap(char[] arr, int left, int right) {
		char temp = arr[left];
		arr[left] = arr[right];
		arr[right] = temp;
	}
}


1. // my solution, Time: O(n), Space: O(n), 1-time AC!
class Solution {
    public String reverseString(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        int low = 0, high = s.length()-1;
        char[] s_char = s.toCharArray();
        while (low < high) {
            char tmp = s_char[low];
            s_char[low] = s_char[high];
            s_char[high] = tmp;
            low++;
            high--;
        }
        return String.valueOf(s_char); // or new String(s_char),直接用string连接会TLE
    }
}


2. Note that this assume that the input string is encoded using ASCII format. 
This will not work with Unicode value where one character may be more than 1 byte.

public class Solution {
    public String reverseString(String s) {
        return new StringBuilder(s).reverse().toString();
    }
}

Time Complexity: `O(n)` (Average Case) and `O(n)` (Worst Case) where `n` is the total number character in the input string. Depending on the implementation. However, it is not possible to reverse string in less than `O(n)`.

Auxiliary Space: `O(n)` space is used where `n` is the total number character in the input string. Space is needed to transform immutable string into character buffer in StringBuilder.


Java's library is probably slower that direct implementation due to extra overhead in check various edge cases such as surrogate pairs.

3. Divide and Conquer (Recursive): good!
public class Solution {
    public String reverseString(String s) {
        int length = s.length();
        if (length <= 1) return s;
        String leftStr = s.substring(0, length / 2);
        String rightStr = s.substring(length / 2, length);
        return reverseString(rightStr) + reverseString(leftStr);
    }
}
Complexity Analysis
Time Complexity: `O(n log(n))` (Average Case) and `O(n * log(n))` (Worst Case) where `n` is the total number character in the input string. The recurrence equation is `T(n) = 2 * T(n/2) + O(n)`. `O(n)` is due to the fact that concatenation function takes linear time. The recurrence equation can be solved to get `O(n * log(n))`.

Auxiliary Space: `O(h)` space is used where `h` is the depth of recursion tree generated which is `log(n)`. Space is needed for activation stack during recursion calls.
The string is split into half. Each substring will be further divided. This process continues until the string can no longer be divided (length `


