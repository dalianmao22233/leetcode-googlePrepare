1. dfs

class Solution {
    HashMap<Node, Node> map = new HashMap<>();
    public Node cloneGraph(Node node) {
        if (node == null) return node;
        if (map.containsKey(node)) 
            return map.get(node);
        
        Node newNode = new Node(node.val, new ArrayList<>());
        // old. new
        map.put(node, newNode);
         
        for (Node neighbor: node.neighbors) {
            Node newNeighbor = cloneGraph(neighbor);
            newNode.neighbors.add(newNeighbor);
        }
   
        return newNode;
         
    }
}

2. iterative, BFS, hashmap+queue: Use HashMap to look up nodes and add connection to them while performing BFS.
class Solution {
    
    public Node cloneGraph(Node node) {
        if (node == null) return node;
        HashMap<Node, Node> map = new HashMap<>();
         
        Node newNode = new Node(node.val, new ArrayList<>());
        map.put(node, newNode); 
        Queue<Node> queue  =new LinkedList<>();
        queue.offer(node);
        // old. new
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            for (Node neighbor: cur.neighbors) {
                if (!map.containsKey(neighbor)) {
                    Node newNeighbor = new Node(neighbor.val, new ArrayList<>());
                    map.put(neighbor, newNeighbor);
                    queue.add(neighbor);
                }  
                map.get(cur).neighbors.add(map.get(neighbor));
                
                 
            }
        }
        
        return map.get(node);
         
    }
}
