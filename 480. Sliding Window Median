https://leetcode-cn.com/problems/sliding-window-median/solution/java-treemaphe-shu-zhuang-shu-zu-zuo-fa-ang0b/
1. class Solution {
    class Obj{
        TreeMap<Integer,Integer> ml = new TreeMap<Integer,Integer>((a,b)->b.compareTo(a));
        TreeMap<Integer,Integer> mr = new TreeMap<Integer,Integer>();
        int lsz = 0, rsz = 0;
        public Integer get_first(TreeMap<Integer,Integer> map){
            return map.keySet().iterator().next();//获取堆中第一个数
        }
        public void inc(TreeMap<Integer,Integer> map,int x){
            map.put(x,map.getOrDefault(x,0)+1); //向堆中添加一个x
        }
        public void dec(TreeMap<Integer,Integer> map,int x){
            if(map.get(x)==1)map.remove(x);  //向堆中删除一个x
            else map.put(x,map.get(x)-1);
        }
        Obj(){
        }
        public void insert(int x){ //插入，按照约定左侧一定比右侧小
            if(ml.size()==0||x<get_first(ml)){
                inc(ml,x);
                lsz++;                
            }
            else{
                inc(mr,x);
                rsz++;
            }
        }
        public void del(int x){//删除
            if(ml.containsKey(x)){
                dec(ml,x);
                lsz--;
            }
            else{
                dec(mr,x);
                rsz--;
            } 
        }
        public double getMid(){//返回中位数
            int t = (lsz+rsz)%2;
            while(lsz-rsz!=t){//调整两个堆的大小关系，使其满足l==r 或者l+1==r
                if(lsz-rsz>t){//左边太多
                    int x = get_first(ml);
                    dec(ml,x);
                    inc(mr,x);
                    lsz--;
                    rsz++;
                }
                else{//右边太多
                    int x = get_first(mr);
                    dec(mr,x);
                    inc(ml,x);
                    rsz--;
                    lsz++;
                }
            }
            if(t==1) return get_first(ml);
            else return (0.0+get_first(ml)+get_first(mr))/2;
        }
    }
    public double[] medianSlidingWindow(int[] nums, int k) {
        double[] res = new double[nums.length-k+1];
        int p = 0;
        Obj obj = new Obj();
        for(int i=0;i<nums.length;i++){
            obj.insert(nums[i]);
            if(i>=k) obj.del(nums[i-k]);
            if(i>=k-1) res[p++] = obj.getMid();
        }
        return res;
    }
}
 
2.class Solution {
    class FWT{//树状数组
        int[] p;
        FWT(int n){
            p = new int[n+1];
        }
        public int lowbit(int x){
            return x&-x;
        }
        public void add(int x,int v){
            for(int i=x;i<p.length;i+=lowbit(i)){
                p[i] += v;
            }
        }
        public int query(int x){
            int sum = 0;
            for(int i=x;i!=0;i-=lowbit(i)){
                sum += p[i];
            }
            return sum;
        }
    }
    int idx = 0;
    public int search(int m,FWT fwt){
        //找第m个数的id
        int l = 1,r=idx;
        while(l<r){
            int mid = (l+r)/2;
            int n1 = fwt.query(mid-1);//不包括mid，mid之前有多少个
            if(n1>m){
                r = mid-1;
            }
            else if(n1<m){
                int n2 = fwt.query(mid);
                if(n2>=m)
                    return mid;
                else
                    l = mid+1;
            } 
            else if(n1==m){
                r = mid;
            }
        }
        return l;
    }
    public double[] medianSlidingWindow(int[] nums, int k) {
        ArrayList<Integer> li = new ArrayList<>();
        for(int num:nums)li.add(num);
        Collections.sort(li);
        //num->id
        HashMap<Integer,Integer> map = new HashMap<>();
        //id->num
        HashMap<Integer,Integer> map2num = new HashMap<>();
        for(int num:li)map.put(num,++idx);
        for(int num:map.keySet())map2num.put(map.get(num),num);
        int n = nums.length;
        FWT fwt = new FWT(n);
        double[] res = new double[n-k+1];
        int p = 0;
        for(int i=0;i<nums.length;i++){
            fwt.add(map.get(nums[i]),1);
            if(i>=k)fwt.add(map.get(nums[i-k]),-1);
            if(i>=k-1){
                if(k%2==1){
                    res[p++] = map2num.get(search(k/2+1,fwt));
                } 
                else{
                    int v1 = map2num.get(search(k/2,fwt));
                    int v2 = map2num.get(search(k/2+1,fwt));
                    res[p++] = (0.0+v1+v2)/2;
                }
            }
            // break;
        }
        return res;
    }
}
 
