public ListNode mergeKLists(ListNode[] lists) {
  return divide(lists, 0, lists.length - 1);
}

private ListNode divide(ListNode[] lists, int start, int end) {
  if (start == end) {
    return lists[start];
  } else if (start < end){
    int mid = (end - start) / 2 + start;
    ListNode left = divide(lists, start, mid);
    ListNode right = divide(lists, mid + 1, end);
    return mergeSort(left, right);
  } else {
    return null;
  }
}

private static ListNode mergeSort(ListNode a, ListNode b) {
  ListNode dummy = new ListNode(0);
  ListNode tail = dummy;
  while (a != null && b != null) {
    if (a.val < b.val) {
      tail.next = a;
      a = a.next;
    } else {
      tail.next = b;
      b = b.next;
    }
    tail = tail.next;
  }

  if (a != null) {
    tail.next = a;
  } else {
    tail.next = b;
  }

  return dummy.next;
}
