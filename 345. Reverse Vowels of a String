// my solucion, AC!
public String reverseVowels(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        int low = 0;
        int high = s.length()-1;
        char[] arr = s.toCharArray();
        while (low < high) {
            if (!isValid(arr[low])) {
                low++;
                // wait low pointer find vowel
                continue;
            }
            if (!isValid(arr[high])) {
                high--;
                // wait high pointer find vowel
                continue;
            }
            swap(arr, low, high);
            low++;
            high--;
        }
        for (int i : arr) {
        System.out.println("arr: " + i);
        }
        return String.valueOf(arr);
    }
    public boolean isValid(Character c) {
        // return "aeiou".indexOf(String.valueOf(c)) != -1 || "AEIOU".indexOf(String.valueOf(c)) != -1;
        c = Character.toLowerCase(c);
        return (c == 'a' || c =='e' || c =='i' || c == 'o' || c =='u');
    }
    public void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

// another solution:
因为我用的string.contains()方法，Java处理的慢，更快的:string.indexOf(s.charAt(i)) != -1, 意思是如果string含有这个字符
或者用set， set中有元音字母，set.contains(xx),逻辑不变
