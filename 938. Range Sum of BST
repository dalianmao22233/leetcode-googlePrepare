找满足node.val 在low~high之间, 求和：
因为这是BST，所以可以直接看左子树右子树，不用traverse搜索。
1. recursive:
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) return 0;
        int sum = 0;
        if (root.val > low) {
            sum += rangeSumBST(root.left, low, high);
        }
        if (root.val < high) {
            sum += rangeSumBST(root.right, low, high);
        }
        if (root.val >= low && root.val <= high) {
            sum += root.val;
        }
        return sum;
    }
}

2. iterative:
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) return 0;
        int sum = 0;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode tmp = stack.pop();
            
            if (tmp.val > low) {
                if (tmp.left != null)
                    stack.push(tmp.left);
            }
            if (tmp.val < high) {
                if (tmp.right != null)
                    stack.push(tmp.right);
            }
            if (tmp.val >= low && tmp.val <= high) {
                sum += tmp.val;
            }
        }
        
        return sum;
    }
}
