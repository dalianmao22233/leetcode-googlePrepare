For each node during pre-order traversal of s, use a recursive function isSame to validate if sub-tree started with this node is the same with t.


The question is exactly similar to the Leetcode 100 Same Tree
Solution for Leetcode 100: https://leetcode.com/problems/same-tree/discuss/148340/CPP-Easy-to-Understand

Also Check Leetcode 101 [Symmetric Tree]https://leetcode.com/problems/symmetric-tree/description/)
Leetcode 101 eh? :P

Okay so now you will be absolutely comfortable with this question. It just requires you to

Start with a node of tree s (lets call this s-node)
Compare the trees forming with root s-node and root t
If the trees match(leetcode 100 logic) then return true
Else go to step one and check for s->left || s->right


public class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null) return false;
        if (isSame(s, t)) return true;
        return isSubtree(s.left, t) || isSubtree(s.right, t);
    }
    
    private boolean isSame(TreeNode s, TreeNode t) {
        if (s == null && t == null) return true;
        if (s == null || t == null) return false;
        
        if (s.val != t.val) return false;
        
        return isSame(s.left, t.left) && isSame(s.right, t.right);
    }
}
