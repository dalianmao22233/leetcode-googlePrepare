https://www.youtube.com/watch?v=DJ4a7cmjZY0 解释很好

1.DP:有一个case: 
input: 0, [], 返回1. 这就是为什么dp[0]=1，并且我没设置边界check。
class Solution {
    public static int change(int amount, int[] coins) {
      int[] dp = new int[amount+1];
          dp[0] = 1;
          for (int j = 0; j < coins.length; j++) {
              for (int i = coins[j]; i <= amount; i++) { // dp[i-coins[j]] requires: start from i-coins[j] = 0.(dp[0])
                  dp[i] += dp[i-coins[j]];
              }
          }
          return dp[amount];
    }
}


2. dfs: TLE 需要掌握， (当amount很大时，所以需要优化成方法3，用Map) 
class Solution {
    public int change(int amount, int[] coins) {
        int[] result = new int[1];
        dfs(coins, amount, 0, result);
        return result[0];
    }
    
    private void dfs(int[] a, int target, int start, int[] result) {
        if (target == 0) {
            result[0]++;
            return;
        }
        
        if (start == a.length || target < 0) {
            return;
        }
        
        for (int i = start; i < a.length; i++) {
            if (target - a[i] >= 0) {
                dfs(a, target - a[i], i, result); //一定用a[i]， 一定用a[j] (即一定不用a[i])...
            }
        }
    }
}

3. dfs: 优化：
BottomUp DFS  + Map<Target, indexInCoins>（也可理解成图的解法）
class Solution {
    public int change(int amount, int[] coins) {
        Map<Key, Integer> results = new HashMap<>(); //Map<targetSum, indexInCoins>
        return dfs(coins, coins.length - 1, amount, results);
    }
    
    private int dfs(int[] a, int index, int target, Map<Key, Integer> memo) {
        Key key = new Key(target, index);
        
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        
        //如果找到一组解返回1
        if (target == 0) {
            return 1;
        }
        //若本次搜索无解则返回0
        if (index == -1 || target < 0) { 
            return 0;
        }
        
        //本题是否可也可BFS？每层的每个点的下一步的可能性为两种用和不用下一个点  -- 类似322BFS？？
        int result = dfs(a, index, target - a[index], memo)  //一定用a[i]
                    + dfs (a, index - 1, target, memo);     //一定不用a[i]
        
        memo.put(key, result);
        return result;
    }
    
    private class Key {
        final int _target;
        final int _index;
        
        public Key(int target, int index) {
            _target = target;
            _index = index;
        }
        
        @Override //因为contains（）会call equasls（），所以这里要overwrite
        public boolean equals(Object that) {
            return that != null && that instanceof Key 
                &&((Key)that)._target == _target
                &&((Key)that)._index == _index;
        } 
        
        @Override
        public int hashCode() {
            return 31 * _target + _index;
        }
    }
}



3.
// LaiOffer

/*
coins[1, 2, 5]
i  dp[i]
0  1
1  1
2  2 (1, 1), (2)
3  2 (1, 2), (1, 1, 1)
4  3 (1, 1, 1, 1), (1, 1, 2), (2, 2)
5  4 


来Offer. dp[i][j]: number of combinations to amount j with the first i types of coins
        0   1  2  3  4  5
0(none) 1   0  0  0  0  0
1(1)    1   1  1  1  1  1
2(2)    1   1  2  2  3  3
3(5)    1   1  2  2  3  4

            No 2       one 2       two 2
dp[2][4] = dp[1][4] + dp[1][2] + dp[1][0] = 1 + 1 + 1
         = dp[1][4] + dp[2][2]
        

            No 5        one 5
dp[3][5] = dp[2][5] + dp[2][0] = 3 + 1 = 4
         = dp[2][5] + dp[3][0]
            
            No coins[i - 1]      one coins[i - 1]                     two coins[i - 1]
dp[i][j] =  dp[i - 1][j] + dp[i - 1][j -coins[i - 1]] + dp[i - 1][j - coins[i - 1] * 2] + ...
         =  dp[i - 1][j] + dp[i][j - coins[i - 1]]

*/


class Solution {
    // method1: Solution2 of LaiOffer
    // O(nm) time, O(nm) space
    public int change(int amount, int[] coins) {
        if(coins == null || coins.length == 0) return (amount == 0 ? 1 : 0);
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];
        
        for(int j = 0; j <= amount; j++) {
            if(j == 0) {
                dp[0][j] = 1;
            }else {
                dp[0][j] = 0;
            }
        }
        
        for(int i = 1; i <= n; i++) {
            for(int j = 0; j <= amount; j++) {
                dp[i][j] = dp[i - 1][j];
                if(j >= coins[i - 1]) dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]]; // method1: O(nm)
            }
        }
        
        return dp[n][amount];
    }
}

 
 

explaination:   https://www.youtube.com/watch?time_continue=579&v=jaNZ83Q3QGc has good explanation!!!
If outer loop is amount, you are considering every coin at every stage.
Let's start with amount 2: it can be made from 2 and 1 + 1, so 2 combinations. 
For amount 3 you would consider every coin again, which would mean that you're trying dp[amount - 1] and dp[amount - 2], 
which is: 2 (as there are 2 combinations for amount 2) and 1 (1 combination for amount 1).
So in this case you have 3 combinations for amount 3:
1 + 2 - taken from dp[amount - 2]
2 + 1, 1 + 1 + 1 - taken from dp[amount - 1]
You can see is one duplicate: 1 + 2 and 2 + 1
If outer loop is coins, you are NOT considering every coing at every stage
Let's assume you've already calculated all dps for coin with value 1. So for every amount there is just one combination, 
dp array looks like that: [1, 1, 1, 1, 1...]
Now we are doing all calculations with value 2. We are at amount 2, so again, amount 2 has 2 combinations: 1 + 1 and 2. 
Makes sense, no duplicates.
For amount 3 you are NOT considering every coin again - you are just considering ending every combination with 2, 
so ONLY dp[amount - 2].
That would make only two combinations for amount 3:
1 + 1 + 1 - taken as previous value of dp[3], calculated for coin value 1
1 + 2 - taken from dp[amount - 2]
Hopefully it shows why we don't have duplicates - all combinations are started with lowest coins, 
there is no way to have lowest coin at the end. You can think that you have all SORTED combinations.
