1. 
// best solution:
Actually we don't care about the "value" of difference, 
we just want to make sure two pointers reach the intersection node at the same time.

We can use two iterations to do that. 
In the first iteration, we will reset the pointer of one linkedlist to the head of another linkedlist after it reaches the tail node. 
In the second iteration, we will move two pointers until they points to the same node. 
Our operations in first iteration will help us counteract the difference. 
So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. 
If the two linked lists have no intersection at all, 
then the meeting pointer in second iteration must be the tail node of both lists, which is null

虽然题目中强调了链表中不存在环，但是我们可以用环的思想来做，我们让两条链表分别从各自的开头开始往后遍历，
当其中一条遍历到末尾时，我们跳到另一个条链表的开头继续遍历。两个指针最终会相等，
而且只有两种情况，一种情况是在交点处相遇，另一种情况是在各自的末尾的空节点处相等。
为什么一定会相等呢，因为两个指针走过的路程相同，是两个链表的长度之和，所以一定会相等。这个思路真的很巧妙，而且更重要的是代码写起来特别的简洁




public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    //boundary check
    if(headA == null || headB == null) return null;
    
    ListNode a = headA;
    ListNode b = headB;
    
    //if a & b have different len, then we will stop the loop after second iteration
    while( a != b){
    	//for the end of first iteration, we just reset the pointer to the head of another linkedlist
        a = a == null? headB : a.next;
        b = b == null? headA : b.next;    
    }
    
    return a;
}

2.  这道题的结构是intersection node之后是同一个sublist, 4->1->8  || 2->1->8。。。 我理解的不对所以没做出来  所以用长度差值是可行的！
1) Get the length of the two lists.

2) Align them to the same start point.

3) Move them together until finding the intersection point, or the end null

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    int lenA = length(headA), lenB = length(headB);
    // move headA and headB to the same start point
    while (lenA > lenB) {
        headA = headA.next;
        lenA--;
    }
    while (lenA < lenB) {
        headB = headB.next;
        lenB--;
    }
    // find the intersection until end
    while (headA != headB) {
        headA = headA.next;
        headB = headB.next;
    }
    return headA;
}

private int length(ListNode node) {
    int length = 0;
    while (node != null) {
        node = node.next;
        length++;
    }
    return length;
}
