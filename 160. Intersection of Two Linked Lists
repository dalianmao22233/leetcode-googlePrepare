1. 
// best solution:
Actually we don't care about the "value" of difference, 
we just want to make sure two pointers reach the intersection node at the same time.

We can use two iterations to do that. 
In the first iteration, we will reset the pointer of one linkedlist to the head of another linkedlist after it reaches the tail node. 
In the second iteration, we will move two pointers until they points to the same node. 
Our operations in first iteration will help us counteract the difference. 
So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. 
If the two linked lists have no intersection at all, 
then the meeting pointer in second iteration must be the tail node of both lists, which is null

用环的想法


public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    //boundary check
    if(headA == null || headB == null) return null;
    
    ListNode a = headA;
    ListNode b = headB;
    
    //if a & b have different len, then we will stop the loop after second iteration
    while( a != b){
    	//for the end of first iteration, we just reset the pointer to the head of another linkedlist
        a = a == null? headB : a.next;
        b = b == null? headA : b.next;    
    }
    
    return a;
}

2.  这道题的结构是intersection node之后是同一个sublist, 4->1->8  || 2->1->8。。。 我理解的不对所以没做出来  所以用长度差值是可行的！
1) Get the length of the two lists.

2) Align them to the same start point.

3) Move them together until finding the intersection point, or the end null

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    int lenA = length(headA), lenB = length(headB);
    // move headA and headB to the same start point
    while (lenA > lenB) {
        headA = headA.next;
        lenA--;
    }
    while (lenA < lenB) {
        headB = headB.next;
        lenB--;
    }
    // find the intersection until end
    while (headA != headB) {
        headA = headA.next;
        headB = headB.next;
    }
    return headA;
}

private int length(ListNode node) {
    int length = 0;
    while (node != null) {
        node = node.next;
        length++;
    }
    return length;
}
