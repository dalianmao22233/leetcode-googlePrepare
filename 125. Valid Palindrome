注意用isLetterOrDigit, 是数字或者字母。
我这次忘记while (l < h)了，如果不加，下面if判断就不对了，比如a bacxxx之类的，会用空格去和后面的比较，而不会跳过空格。

public boolean isPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        int low = 0;
        int high = s.length()-1;
        while (low <= high) {
            while (low < high && !Character.isLetterOrDigit(s.charAt(low))) {
                low++;
            }
            while (low < high && !Character.isLetterOrDigit(s.charAt(high))) {
                high--;
            }
            if (Character.toLowerCase(s.charAt(low))  !=  Character.toLowerCase(s.charAt(high))) {
                return false;
            }
            low++;
            high--;
        }
        return true;
}
    
    
    
my solution:
// Time: O(n), Space: O(1);
class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty()) {
            return true;
        }
        s = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();  // replaceAll!!!
        int low = 0, high = s.length()-1; // if only have 1 letter, will directly return true; pass while.
        while(low < high) {   // low == high is also ok. 
            if (s.charAt(low) != s.charAt(high)) {
                return false;
            } 
            low++;
            high--;
        }
        return true;
    }
}


my another solution:

class Solution {
    public boolean isPalindrome(String s) {
        if (s == null || s.length() == 0 || s.length() == 1) {
            return true;
        }
        s = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
        for (int i = 0; i < s.length()/2; i++) {   // cannot use i<=, 因为如果处理之后s="", 会index out of range.
            if (s.charAt(i) != s.charAt(s.length()-1-i)) {
                return false;
            }
        }
        return true;
    }
}
