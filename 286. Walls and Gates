题目：-1: wall, 0: gate, INF: 空房间，求空房间到门的最短距离，把这个最短距离写在房间的位置上。
// BFS
// 需要queue，首先把门的位置都排入queue中，然后开始循环，对于门位置的四个相邻点，我们判断其是否在矩阵范围内，以及这四个相邻点是不是空房间。
// 如果满足这些条件，将当前位置赋为上一位置加1，并将次位置排入queue中，这样等queue中的元素遍历完了，所有位置的值就被正确地更新了
// time: O(mn) 不是基于门有几个，而是看BFS经历了多少步，假设只有1个门，BFS用了O(mn)步骤来找到所有的空房间, 
// 如果有k个门，一旦我设定了某个房间的distance,就代表已经visited了，意味着每个房间最多只能被visit一次。所以最终是O(mn)
// space: O(mn) (queue size.)

class Solution {
    private static final int EMPTY = Integer.MAX_VALUE;
    private static final int GATE = 0;

    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length;
        if (m == 0) return;
        int n = rooms[0].length;
        Queue<int[]> q = new LinkedList<>();
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                if (rooms[row][col] == GATE) {
                    q.add(new int[] { row, col });
                }
            }
        }
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        while (!q.isEmpty()) {
            int[] point = q.poll();
            for (int i = 0; i < 4; i++) { // 4 directions
                int x = point[0] + dx[i];
                int y = point[1] + dy[i];
                if (x < 0 || y < 0 || x >= m || y >= n || rooms[x][y] != EMPTY) { //越界或者不是空房间，就跳出，找下一个方向。
                    continue;
                }
                rooms[x][y] = rooms[point[0]][point[1]] + 1;
                q.add(new int[] { x, y });  // 满足所有条件，加入q，进行下一个方向的遍历。
            }
        }
    }
}

// DFS:
// 搜索0的位置，每找到一个0，以其周围四个相邻点为起点，开始DFS遍历，并带入深度值1，
// 如果遇到的值大于当前深度值，我们将位置值赋为当前深度值，并对当前点的四个相邻点开始DFS遍历，注意此时深度值需要加1，
// 这样遍历完成后，所有的位置就被正确地更新了

int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

public void wallsAndGates(int[][] rooms) {
    for(int i = 0; i < rooms.length; i++) {
        for(int j = 0; j < rooms[0].length; j++) {
            if(rooms[i][j] == 0) {
                dfs(rooms, i, j);
            }              
        }
    }
}

public void dfs(int[][] rooms, int i, int j) {
    for(int[] dir : dirs) {
        int x = i + dir[0], y = j + dir[1];
        if(x < 0 || x >= rooms.length || y < 0 || y >= rooms[0].length || rooms[x][y] <= rooms[i][j]) 
          continue;  // 为什么<=? 因为要求最短路径，此时已经是最短了，不用去更新了。直接跳出。
        rooms[x][y] = rooms[i][j] + 1;
        dfs(rooms, x, y);
    }
}









// BFS 暴力做法：O(m^2*n^2), space: O(mn), 用distance数组来储存从起点到当前节点的路径，并且这个数组可以用来判断是否已经visited过。
private static final int EMPTY = Integer.MAX_VALUE;
private static final int GATE = 0;
private static final int WALL = -1;
private static final List<int[]> DIRECTIONS = Arrays.asList(
        new int[] { 1,  0},
        new int[] {-1,  0},
        new int[] { 0,  1},
        new int[] { 0, -1}
);

public void wallsAndGates(int[][] rooms) {
    if (rooms.length == 0) return;
    for (int row = 0; row < rooms.length; row++) {
        for (int col = 0; col < rooms[0].length; col++) {
            if (rooms[row][col] == EMPTY) {
                rooms[row][col] = distanceToNearestGate(rooms, row, col);  //空房间进queue.
            }
        }
    }
}

private int distanceToNearestGate(int[][] rooms, int startRow, int startCol) {
    int m = rooms.length;
    int n = rooms[0].length;
    int[][] distance = new int[m][n];
    Queue<int[]> q = new LinkedList<>();
    q.add(new int[] { startRow, startCol });
    while (!q.isEmpty()) {
        int[] point = q.poll();
        int row = point[0];
        int col = point[1];
        for (int[] direction : DIRECTIONS) {
            int r = row + direction[0];
            int c = col + direction[1];
            if (r < 0 || c < 0 || r >= m || c >= n || rooms[r][c] == WALL
                    || distance[r][c] != 0) { // 如果distance!=0 说明已经visit过了，这个方向不能再走了，要去尝试下一个方向。
                continue;
            }
            distance[r][c] = distance[row][col] + 1;
            if (rooms[r][c] == GATE) {  //遇到gate就可以返回distance了。
                return distance[r][c];
            }
            q.add(new int[] { r, c });
        }
    }
    return Integer.MAX_VALUE;
}
