// binary search, trie tree implementation: etc: https://leetcode.com/problems/longest-common-prefix/solution/
//  good solution, 100%. Time: O(n), Space: O(1), using string build-in method: indexOf()
class Solution {
     public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) { // return -1 or return > 0, means no such result or not prefix.
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }        
        }
        return prefix;
    }
}

// use str.compareTo(string) to sort string order
public String longestCommonPrefix(String[] strs) {
        if (strs == null)       return null;
        if (strs.length == 0)   return "";
        
        String first = strs[0], last = strs[0];
        
        for (String str : strs) {
            if (str.compareTo(first) < 0)
                first = str;
            if (str.compareTo(last) > 0)
                last = str;
        }
        
        int i = 0, len = Math.min(first.length(), last.length());
        
        while (i < len && first.charAt(i) == last.charAt(i))
            i++;
        
        return first.substring(0, i);
    
    }
    
// my solution, slow. Brute force
class Solution {
    public String longestCommonPrefix(String[] strs) {
		if (strs == null || strs.length == 0) {
			return "";
		}
		int minlen = Integer.MAX_VALUE;
		for (int i = 0; i < strs.length; i++) {
			minlen = Math.min(minlen, strs[i].length());
		}
		String first = strs[0];
		for (int i = 1; i < strs.length; i++) {
			if (first.length() == 0) {
				return "";
			}
			String item = strs[i];
			int a = 0;
			while (a < minlen && a < first.length()) {
				if (first.charAt(a) == item.charAt(a)) {
					a++;
				} else {
					break;
				}
			}
			first = first.substring(0, a);
		}
		return first;
	}
}
