两个方法都是：Worst case, both O(mn), counting the boundaryDFS stack space
1. union find
class Solution {
    class UF {
        int count;
        int[] parent;
        int[] rank;
        public UF(int n) {
            count = n;
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                rank[i] = 0;
            }
        }
        public int find(int i) {
            if (parent[i] != i) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        public void union(int i, int j) {
            int ri = find(i);
            int rj = find(j);
            if (ri != rj) {
                if (rank[ri] > rank[rj]) {
                    parent[rj] = ri;
                } else if (rank[ri] < rank[rj]) {
                    parent[ri] = rj;
                } else {
                    parent[ri] = rj;
                    rank[rj]++;
                }
                count--;
            }
                
        }
        public boolean connected(int i, int j) {
            return find(i) == find(j);
        }
        public int getCount() {
            return count;
        }
    }
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        // find all connected 0 zones, change value to 1
        int m = board.length;
        int n = board[0].length;
        UF uf = new UF(m*n);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 || i == m-1 || j == 0 || j == n-1) && board[i][j] == 'O') {
                    // 如果边界上有O,就和dummy node合并
                    uf.union(i*n+j, m*n);
                }  else if (board[i][j] == 'O') {
                    if (i-1 >= 0 && board[i-1][j] == 'O') {
                        uf.union(i*n+j, (i-1)*n+j);
                    }   
                    if (i+1 < m && board[i+1][j] == 'O') {
                        uf.union(i*n+j, (i+1)*n+j);
                    }
                    if (j-1 >= 0 && board[i][j-1] == 'O') {
                        uf.union(i*n+j, i*n+j-1);
                    }
                    if (j+1 < n && board[i][j+1] == 'O') {
                        uf.union(i*n+j, i*n+j+1);
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!uf.connected(i*n+j, m*n)) {
                    board[i][j] = 'X';
                }
            }
        }
    }
}


2. DFS

class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0)
            return;
        if (board.length < 2 || board[0].length < 2)
            return;
        int m = board.length, n = board[0].length;
        //Any 'O' connected to a boundary can't be turned to 'X', so ...边界上的O都不能变成X，只有内层的O才有可能
	    //Start from first and last column, turn 'O' to '*'.    所以先走一遍边界，把O都变成特殊字符作为标记
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O')
                dfs(board, i, 0);
            if (board[i][n-1] == 'O')
                dfs(board, i, n-1);	
        }

        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O')
                dfs(board, 0, j);
            if (board[m-1][j] == 'O')
                dfs(board, m-1, j);	
        }
        //post-prcessing, turn 'O' to 'X', '*' back to 'O', keep 'X' intact.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O')
                    board[i][j] = 'X';
                else if (board[i][j] == '1')
                    board[i][j] = 'O';
            }
        }
    }
    
    //Use DFS algo to turn internal however boundary-connected 'O' to '*';
    private void dfs(char[][] board, int i, int j) {
        if (i < 0 || i > board.length - 1 || j <0 || j > board[0].length - 1) {
            // sanity check.
            return;
        }

        if(board[i][j] != 'O') {
            // 是X或者1
            return;
        }

        board[i][j] = '1';

        dfs(board, i-1, j);
        dfs(board, i+1, j);
        dfs(board, i, j-1);
        dfs(board, i, j+1);
    }
}
