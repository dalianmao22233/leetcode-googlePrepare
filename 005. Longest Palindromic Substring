求回文子串，一般有两种方法。 第一种方法比较直接，基本思路是对于每个子串的中心
（可以是一个字符，或者是两个字符的间隙，比如串abc,中心可以是a,b,c,或者是ab的间隙，bc的间隙）往两边同时进行扫描，直到不是回文串为止。
假设字符串的长度为n,那么中心的个数为2*n-1(字符作为中心有n个，间隙有n-1个）。对于每个中心往两边扫描的复杂度为O(n),
所以时间复杂度为O((2*n-1)*n)=O(n^2),空间复杂度为O(1)，代码如下：

public class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0) {
            return "";
        }
        int maxlen = 0;
        String result = "";
        for(int i = 0; i < 2 * s.length() - 1; i++) {
            int left = i/2;  //本来应该是n个loop, 现在用的2n-1,所以一定要/2，不然下面没法charAt(i)
            int right = i/2;
            if(i%2 == 1) right++;// 奇数
            String str = expandAroundCenter(s, left, right);
            if(maxlen < str.length()) {
                maxlen = str.length();
                result = str;
            }
        }
        return result;
        
    }
    // scan to both side of center to create palindrome
    private String expandAroundCenter(String s, int left, int right) {
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // make sure include all palindrome characters.
        return s.substring(left+1, right);
    }
}

//DP:时间复杂度O（n^2）,空间O（n^2）,动态规划方程如下：
//dp[i][j] 表示子串s[i…j]是否是回文
//初始化：dp[i][i] = true (0 <= i <= n-1);  dp[i][i-1] = true (1 <= i <= n-1); 其余的初始化为false
//dp[i][j] = (s[i] == s[j] && dp[i+1][j-1] == true)
//在动态规划中保存最长回文的长度及起点即可
https://leetcode.com/problems/longest-palindromic-substring/discuss/151144/Bottom-up-DP-Logical-Thinking
class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1)
            return s;
        
        boolean[][] dp = new boolean[s.length()][s.length()];
        
        for (int i = 0; i < s.length(); i++)
            dp[i][i] = true;
        
        int longestPalindromeStart = 0, longestPalindromeLength = 1;
        for (int start = s.length() - 1; start >= 0; start--) {
            for (int end = start + 1; end < s.length(); end++) {
                if (s.charAt(start) == s.charAt(end)) {
                    if (end - start == 1 || dp[start + 1][end - 1]) {
                        dp[start][end] = true;
                        if (longestPalindromeLength < end - start + 1) {
                            longestPalindromeStart = start;
                            longestPalindromeLength = end - start + 1;
                        }
                    }
                }

            }
        }
        
        return s.substring(longestPalindromeStart, longestPalindromeStart + longestPalindromeLength);
    }
}

// 马拉车解法： https://articles.leetcode.com/longest-palindromic-substring-part-ii/， 太复杂了我没看
http://www.cnblogs.com/TenosDoIt/p/3675788.html

// 我写了个DP：也过了, 慢

class Solution {
	public static String longestPalindrome(String s) {
		if (s == null || s.length() <= 1) {
			return s;
		}
		int len = s.length();
        if (isValid(s)) {
			return s;
		}
		int[][] dp = new int[len+1][len+1];
      
		// from i-j, longest palindrome string
		String res = "";
		int max = 0;
		for (int i = 0; i <= len; i++) {
			for (int j = i+1; j <= len; j++) {
				if (isValid(s.substring(i, j))) {
					dp[i][j] = j-i;
					if (dp[i][j] > max) {
						max = dp[i][j];
						res = s.substring(i, j);
					}
				} else {
					dp[i][j] = 1;  // 1 character is also palindrome
                    
				}
			}
		}
		return res;
	}
	public static boolean isValid(String s) {
		if (s == null || s.length() == 0) {
			return true;
		}
		int l = 0, h = s.length()-1;
		while (l < h) {
			if (s.charAt(l) != s.charAt(h)) {
				return false;
			}
			l++;
			h--;
		}
		return true;
	}
}
