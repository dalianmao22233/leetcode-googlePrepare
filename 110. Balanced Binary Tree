
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) return true;
        if (Math.abs(height(root.left)-height(root.right)) <= 1) {   // 这里我总是直接就return 了，记得判断left, right.
            return isBalanced(root.left) && isBalanced(root.right);
        }
        return false;
    }
   
    public int height(TreeNode root) {
        if (root == null) return 0;
        return Math.max(height(root.left), height(root.right)) + 1;
    }
}


// 减少了计算， check left and right node in every recursion to avoid further useless search
public boolean isBalanced(TreeNode root) {
        return (checkHeight(root) != -1);
    }
    public int checkHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = checkHeight(root.left);
        if (left == -1) {
            return -1;
        }
        int right = checkHeight(root.right);
        if (right == -1) {
            return -1;
        }
        if (Math.abs(left-right) > 1) {
            return -1;
        }
        return Math.max(left,right)+1;
    }
