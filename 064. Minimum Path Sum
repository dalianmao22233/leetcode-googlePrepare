1. MY DP。 和unique path一样


class Solution {
    int min = 0;
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        
        dp[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            dp[i][0] += dp[i-1][0] + grid[i][0];
        }
        for (int j = 1; j < n ;j++) {
            dp[0][j] += dp[0][j-1] + grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] += Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}


2. no extra space:
public class Solution {
    public int minPathSum(int[][] grid) {
        for (int i = grid.length - 1; i >= 0; i--) {
            for (int j = grid[0].length - 1; j >= 0; j--) {
                if(i == grid.length - 1 && j != grid[0].length - 1)
                    grid[i][j] = grid[i][j] +  grid[i][j + 1];
                else if(j == grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + grid[i + 1][j];
                else if(j != grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + Math.min(grid[i + 1][j],grid[i][j + 1]);
            }
        }
        return grid[0][0];
    }
}

3. 最短路径做法，TLE，但是需要学习：此处用了priorityqueue,比较慢，也没考虑只能接受2个方向的移动。
做法：
1. dijkstra的目的是把图分为visited / unvisited 2部分
2. 对于visited part中每个节点都有一个dist value, 我们需要检查visited & unvisited之间连接的每条边， 
start node在visited中， end node在unvisited中。 我们最终想找的就是一条边，拥有最小值 ：dist(start node) + the edge's value
把这个node放进visited part， 继续检查edges.
3.用priorityQueue 来跟踪 以上说的最小值，这道题里edge value 就是node本身的值，所以就只看min(dist(start node)) of every unvisited nodes


public class Solution_dijkstra {

  class PointComparator implements Comparator<int[]>{
    int[][] dist;
    public PointComparator(int[][] dist){
      this.dist = dist;
    }
    @Override
    public int compare(int[] o1, int[] o2) {
          int[] point1 = (int[])o1;
          int[] point2 = (int[])o2;
          return Integer.valueOf(dist[point1[0]][point1[1]])
              .compareTo(Integer.valueOf(dist[point2[0]][point2[1]]));
      }
  }

  public int minPathSum(int[][] grid) {
      if(grid == null || grid.length == 0) return 0;
      int m = grid.length;
      int n = grid[0].length;

      boolean[][] visited = new boolean[m][n];
      int[][] dist = new int[m][n];

      for(int x = 0; x < m; x++){
          for(int y = 0; y < n; y++){
              dist[x][y] = Integer.MAX_VALUE;
          }
      }

      dist[0][0] = grid[0][0];

      PriorityQueue<int[]> pq = new PriorityQueue<int[]>( m*n, new PointComparator(dist));

      pq.add(new int[]{0, 0});

      while(!pq.isEmpty()){

          int[] point = pq.poll();
          int x = point[0];  // 一个点的横纵坐标
          int y = point[1];
          int d = dist[x][y];

          if(x == n-1 && y == m-1){  //到了目的地了
              return d;
          }

          visited[x][y] = true;

          if((y+1 < n) && !visited[x][y+1]){
              dist[x][y+1] = min(
                  dist[x][y+1],
                  d + grid[x][y+1]);
              pq.add(new int[]{x, y+1});
          }

          if((x+1 < m ) && !visited[x+1][y]){
              dist[x+1][y] = min(
                  dist[x+1][y],
                  d + grid[x+1][y]);
              pq.add(new int[]{x+1, y});
          }
      }
      return 0;

  }

  private int min(int i1, int i2){
    return i1 < i2 ? i1 : i2;
  }
}
