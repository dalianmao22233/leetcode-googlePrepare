// from laioffer recursion 2 class:

// from laioffer:
class Solution {
    public double myPow(double x, int n) {
        if (x == 0 && n <= 0) {
            //throw new ArithmeticException("illegal double value");
            return -1;
        }
        long N = n;
        if (N < 0) {
            x = 1/x;
            N = -N;  
            //It is for the case where n is equal to MIN_VALUE of Integer. 
            //In this case we can not use int to store the absolute value, because it is out of the maximum range of int.
        }
        return pow(x, N);
    }
    private double pow(double x, long n) {
        if (n == 0) {
            return 1.0;
        }
        double half = pow(x, n/2);
        if (n%2 == 1) {
            return half*half*x;
        } else {
            return half*half;
        }
    }
    // Time: O(logn), Space: O(logn), laioffer note.
}

// avoid int->long:
double myPow(double x, int n){
    if (n == 0){
        return 1;
    } else {  
        double half = myPow(x, n/2);
        if (n%2 == 0){   // 切记这里不能倒顺序，必须先判断这个，因为n可能为负数。 所以n%2有可能为-1. 于是会报错。
            return half*half;
        } else {
            if (n > 0){
                return half*half*x;
            } else {
                return half*half/x;
            }                
        }   
    }
}
