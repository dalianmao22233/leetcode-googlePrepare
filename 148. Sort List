/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        // step 1. cut the list to two halves and keep the tail for first half
        ListNode slow = head;
        ListNode fast = head;
        ListNode tail = head;
        while (fast != null && fast.next != null) { // 注意这个条件，如果是fast.next != null && fast.next.next != null就不对了，不知道
            tail = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        tail.next = null;
        
        // step 2. sort each half
        ListNode left = sortList(head);
        ListNode right = sortList(slow);
        
        // step 3. merge l1 and l2
        return merge(left, right);
    }

    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummyNode = new ListNode(0);
        ListNode head = dummyNode;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                head.next = l1;
                l1 = l1.next;
            } else {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        if (l1 != null) {
            head.next = l1;
        }  
        if (l2 != null) {
            head.next = l2;
        }
        return dummyNode.next;
    }
}


2. 哈哈哈普通方法，跟链表没屁关系：
class Solution {
    public ListNode sortList(ListNode head) {
	        ListNode h = head;
	        int length = 0;
	        while(head != null)
	        {
	        	length++;
	        	head = head.next;
	        }
	        int[] arr = new int[length];
	        head = h;
	        int cur = 0;
	        while(head != null)
	        {
	        	arr[cur++] = head.val;
	        	head = head.next;
	        }
	        Arrays.sort(arr);
	        head = h;
	        for(int a=0; a<arr.length; a++)
	        {
	        	head.val = arr[a];
	        	head = head.next;
	        }
	    	return h;
    }
}
