用list存储数字， map key = number value, value = index in list.
map用于check value是否已经被插入。
插入是o(1)操作的，只有数组的push_back，否则用链表至少o(logn)，还得保证是有序的；

同理，删除是o(1)操作的，只有数组的pop_back，否则至少o(logn)；

查找是o(1)操作的只有哈希表。


ArrayList remove method is O(n), 如果从random位置移除。
为了克服这个问题，swap (尾部index, current index),再移除尾部。 之后需要update map中的值。map.put(swapVal, ind)


class RandomizedSet {
    HashMap<Integer, Integer> map; // key = val, value = index
    List<Integer> list;
    int ind = 0;
    
    /** Initialize your data structure here. */
    public RandomizedSet() {
        map = new HashMap<>();
        list = new ArrayList<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (map.containsKey(val)) {
            return false;
        }
        list.add(val);
        map.put(val, list.size()-1);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        int ind = map.getOrDefault(val, -1);
        if (ind == -1) {
            return false; // map没有
        }
        Collections.swap(list, ind, list.size()-1);
        int swapVal = list.get(ind);
        map.put(swapVal, ind);
        list.remove(list.size()-1);
        map.remove(val);  // remove key == val
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int max = list.size();
        int min = 0;
        int ind = (int)(Math.random() * (max-min) + min);
        return list.get(ind);
        =======================
        or:
        Random random = new Random();
        return list.get( random.nextInt(list.size()) );
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
