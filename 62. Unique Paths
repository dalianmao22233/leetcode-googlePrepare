//	When (n==0||m==0) the function always returns 1 since the robot
//	can't go left or up.
//	For all other cells. The result = uniquePaths(m-1,n)+uniquePaths(m,n-1)
//	Therefore I populated the edges with 1 first and use DP to get the full 2-D array.

// DP, 最后就是取能到达上面的methods和到达左边的methods的和。
	// Time: O(m*n)
	public static int uniquePaths(int m, int n) {
		Integer[][] map = new Integer[m][n];
		for (int i = 0; i<m; i++) {
			map[i][0] = 1;
		}
		for (int j= 0; j<n; j++) {
			map[0][j] = 1;
		}
		for (int i = 1; i<m; i++) {
			for (int j = 1;j < n; j++) {
				map[i][j] = map[i-1][j] + map[i][j-1];
			}
		}
		return map[m-1][n-1];
	}


// better,省空间
	public static int uniquePaths2(int m, int n) {
		int N = n + m - 2;// how much steps we need to do
		int k = m - 1; // number of steps that need to go down
		double res = 1;
		// here we calculate the total possible path number
		// Combination(N, k) = n! / (k!(n - k)!)
		// 用C2 6举例子，就知道下面怎么来的了。
		// reduce the numerator and denominator and get
		// C = ( (n - k + 1) * (n - k + 2) * ... * n ) / k!
		for (int i = 1; i <= k; i++)
			res = res * (N - k + i) / i;
		return (int)res;
	}
