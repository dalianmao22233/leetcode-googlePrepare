贪心：
https://github.com/wisdompeak/LeetCode/tree/master/Greedy/435.Non-overlapping-Intervals
我们将所有的区间按照starting point排序之后，依次遍历它们。我们维护一个当前能到达的最远点far。如果

新区间的左端点在far的右边，那么新区间就不会与之前的任何区间重合，计数器加1
新区间的右端点在far的左边，那么新区间就被旧区间包围。我们于是舍弃之前的区间，而prefer当前的区间，并更新far为右端点，使其变得更靠前。目的是让后面有机会加入更多的区间。
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        int far = Integer.MIN_VALUE;
        int count = 0;
        for (int[] interval: intervals) {
            if (interval[0] >= far) {
                far = interval[1]; //不会重合。
                count++;
            } else if (interval[1] < far) {
                far = interval[1];
            }
        }
        return intervals.length-count;
    } 
}
