二刷：
既然是后序遍历，那么就要在遍历完左子树、右子树之后再读取数值。所以作为中继点的根节点会经过三次。
第一次是通过根节点把左子树压入栈，第二次是通过根节点把右子树压入栈，第三次才是读取。所以我们设置一个set，来标记每个在退栈时被访问过的节点。

算法的基本结构保持和先序遍历算法一致：

1.如果遇到非空节点，从根节点开始一路靠左入栈，入栈时不读取节点数值；
2.当遇到空节点时，找到栈顶元素（局部的根节点）。如果之前没有被收录在set里，则记录之，并通过它把其右子树压入栈；
3.如果栈顶元素已经被set记录过，此时说明其右节点已经遍历完毕，可以读取数值并将该节点退栈。（思考，退栈后root应该如何赋值？答案：把root赋值为NULL，这样就可以循环到第2步）
class Solution {
    // iterative, use set to record root appear
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if (root == null) {
            return res;
        }
        Stack<TreeNode> stack = new Stack<>();
        Set<TreeNode> set = new HashSet<>();
        while (!stack.isEmpty() || root != null) {
            // traverse all left node
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            // take a look at root, whether it already appears.
            root = stack.peek();
            if (!set.contains(root)) {
                set.add(root);
                root = root.right;
            } else {
                res.add(root.val);
                stack.pop();
                // right subtree is finished, pop subroot, root can point to the top of stack in the next round.
                root = null;
            }
        }
        return res;
    }
    
    
    // ================================================
    // iterative , revert preorder traversal
    public List<Integer> postorderTraversal2(TreeNode root) {
        LinkedList<Integer> output = new LinkedList();
        Deque<TreeNode> stack = new ArrayDeque();
        
        if (root == null) return output;

        stack.push(root);
        while (!stack.isEmpty()) {
            root = stack.pop();
            output.addFirst(root.val);
            if (root.left != null) stack.push(root.left);
            if (root.right != null) stack.push(root.right);
        }

        return output;
    }
    
    
    // ================================================
    // recursive
    List<Integer> res = new ArrayList<Integer>();
    public List<Integer> postorderTraversal3(TreeNode root) {
        if (root == null){ return res;}
        postorderTraversal(root.left);
        postorderTraversal(root.right);
        res.add(root.val);
        return res;
    }
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. recursive: DFS
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if (root == null) {
            return res;
        }
        if(root.left != null) {
            res.addAll(postorderTraversal(root.left));
        }
        if(root.right != null) {
            res.addAll(postorderTraversal(root.right));
        }
        res.add(root.val);
        return res;
    }
}

2. iterative: BFS 。
// offline algorithm： 这个方法不好，space用得太多，需要在内存中存下来整棵树，才能得到结果。time: O(n), space: O(n)
	public List<Integer> postOrder(TreeNode root) {
		List<Integer> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		// post-order traversal
		Deque<TreeNode> stack = new LinkedList<TreeNode>();
		// store result
		Deque<TreeNode> temp = new LinkedList<>();
		stack.offerFirst(root);
		while (!stack.isEmpty()) {
			TreeNode cur = stack.pollFirst();
			temp.offerFirst(cur);
			if (root.left != null) {
				stack.offerFirst(root.left);
			}
			if (root.right != null) {
				stack.offerFirst(root.right);
			}
		}
		// reverse temp = res.
		while (!temp.isEmpty()) {
			res.add(temp.pollFirst().val);
		}
		return res;
	}
     

//Iterative: from laioffer推荐
// better:
// 问题是我们要先遍历左右子树，再从stack中消灭root,所以需要知道什么时候才能完成对左右子树的遍历。
// Maintain a previous node!!!!
// 来记录之前visited node on traversing path. 这样我们能知道当前的direction以及后面应该去的direction.

// root = stack.top
// if previous == null, 这是根节点。go down (left subtree has priority)
// if previous == current's parent, go down (left subtree has priority)
// if previous == current.left, left subtree finished, go current.right
// if previous == current.right, right subtree finished, pop current, go up!

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		Deque<TreeNode> stack = new LinkedList<>();
		TreeNode prev = null;
		stack.offerFirst(root);

		while (!stack.isEmpty()) {
			TreeNode cur = stack.peekFirst();  //先看一眼当前节点
			// go down
			if (prev == null || cur == prev.left || cur == prev.right) {  //cur是prev的孩子
				if (cur.left != null) {
					stack.offerFirst(cur.left);
				} else if (cur.right != null) {
					stack.offerFirst(cur.right);
				} else {
					res.add(cur.val);
					stack.pollFirst();
				}
			} else if (prev == cur.left) {
				// from left subtree
				if (cur.right != null) {
					stack.offerFirst(cur.right);
				} else {
					res.add(cur.val);
					stack.pollFirst();
				}
			} else {
				// from right subtree
				res.add(cur.val);
				stack.pollFirst();
			}
			prev = cur;  //向前走一步
		}
		return res;
    }
}
