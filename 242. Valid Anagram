1. // Use anagram feature, array feature: Time: O(n), Space: O(n) 
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        char[] s_char = s.toCharArray();
        char[] t_char = t.toCharArray();
        int[] counter = new int[26];
        for (int i = 0; i < s.length(); i++) {
            counter[s_char[i] - 'a'] ++;  
            counter[t_char[i] - 'a'] --;
            // or change to s.charAt(i) - 'a', better, reduce space. Space O(1), 因为不论string多长，数组永远是固定长度26
        }
        for (Integer count : counter) {
            if (count != 0) {
                return false;
            }
        }
        return true;
    }
}

2. Use java sort function:
public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    char[] str1 = s.toCharArray();
    char[] str2 = t.toCharArray();
    Arrays.sort(str1);
    Arrays.sort(str2);
    return Arrays.equals(str1, str2);
}


3. my solution:
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null && t == null) {
            return true;
        }
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        int[] map = new int[26];
        for (int i = 0; i < s.length(); i++) {
            map[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            map[t.charAt(i) - 'a']--;
        }
        for (int i = 0; i < map.length; i++) {
            if (map[i] != 0) {
                return false;
            }
        }
        return true;
    }
}
