my solution, 和56， 57一样，扫描线：
class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        if (intervals.length == 0) {
            return true;
        }
        // sort intervals
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        // sweep line
        int start = intervals[0][0];
        int end = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            // need to start from i=1, example [[7, 10], [2, 4]], if from i=0, in the 1st round will return false;
            if (intervals[i][0] < end) {
                // note: cannot use <=, example [[1, 13], [13, 15]], if use= will output false;
                return false;
            } else {
                start = intervals[i][0];
                end = intervals[i][1];
            }
        }
        return true;
                
    }
}

==============================================================================================================






1. sorting: sort the meetings by starting time, 
go through the meetings one by one and make sure that each meeting ends before the next one starts.
Time: O(nlogn+n) = O(nlogn), space: O(1)

public boolean canAttendMeetings(Interval[] intervals) {
    Arrays.sort(intervals, new Comparator<Interval>() {
        public int compare(Interval i1, Interval i2) {
            return i1.start - i2.start;
        }        
    });
    for (int i = 0; i < intervals.length - 1; i++) {
        if (intervals[i].end > intervals[i + 1].start) return false;
    }
    return true;
}

2. brute force: Time: O(n^2), space: O(1)
compare every two meetings in the array, and see if they conflict with each other (i.e. if they overlap). 
Two meetings overlap if one of them starts while the other is still taking place.


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if (intervals == null || intervals.length == 0) {
            return true;
        }
        int len = intervals.length;
        for (int i = 0; i < len; i++) {
            for (int j = i+1; j < len; j++) {
                if (overlap(intervals[i], intervals[j])) {
                    return false;
                }
            }
        }
        return true;
    }
    private boolean overlap(Interval i1, Interval i2) {
        return (i1.start >= i2.start && i1.start < i2.end) ||  
            //[[13,15],[1,13]]  i1.start <= i2.end will return overlap is true;
            (i2.start >= i1.start && i2.start < i1.end);
    }
}
