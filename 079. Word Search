// dfs找连通路径
我个人觉得是每个格子都要上下左右搜，所以每个格子有4个可能，一共m*n个格子，所以是O(4^(m*n))的时间复杂度。空间是m*n

class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        
        int row = board.length;
        int col = board[0].length;
        boolean[][] visited = new boolean[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (word.charAt(0) == board[i][j] && dfs(board, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean dfs(char[][] board, String word, int i, int j, int index, boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }
        int row = board.length;
        int col = board[0].length;
        if (i < 0 || i >= row || j < 0 || j >= col || board[i][j] != word.charAt(index) || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        if (dfs(board, word, i+1, j, index+1, visited) ||
            dfs(board, word, i-1, j, index+1, visited) ||
            dfs(board, word, i, j+1, index+1, visited) ||
            dfs(board, word, i, j-1, index+1, visited)
           ) {
            return true;
        }
        visited[i][j] = false;  
        // 不是number of island那种求连通量（都沉没下去）
        // 对于当前格子要恢复状态，这样到下一个for循环的时候这个格子还可以继续用。可能会组成结果的一部分
        return false;
    }
}

2. 其实和3 思路一样，就是关于取代和还原board[i][j]的做法不同，这种好想
class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;

        boolean result = false;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
               if(dfs(board,word,i,j,0)){
                   result = true;
               }
            }
        }

        return result;
    }

    public boolean dfs(char[][] board, String word, int i, int j, int k){
        int m = board.length;
        int n = board[0].length;

        if(i<0 || j<0 || i>=m || j>=n){
            return false;
        }

        if(board[i][j] == word.charAt(k)){
            char temp = board[i][j];
            board[i][j]='#';  // 用#标志visited
            if(k==word.length()-1){
                return true;
            }else if(dfs(board, word, i-1, j, k+1)
            ||dfs(board, word, i+1, j, k+1)
            ||dfs(board, word, i, j-1, k+1)
            ||dfs(board, word, i, j+1, k+1)){
                return true;
            }
            board[i][j]=temp;
        }

        return false;
    }
}


3. // 高票回答：没用visited数组，用Board本身记录visited信息

把空间复杂度优化到了常数空间，怎么做的呢？

就是把选中的字符的值，改成一个不可能和其他字符相等的值，这样在找和 word 的第一个字符相等的字符的时候，就永远不会找到之前选中的字符了。

开始假设字符被选中的时候，我们将其改成 board[current_i][current_j]='#'

这样到最后，如果它没被选中就还原，怎么还原？原来的值似乎找不到了，所以我们应该找一种可逆的操作。

我们可以用异或，因为字符值的范围是 0 - 255，二进制的话就是 0000 0000 - 1111 1111，我们把它和 256 做异或，也就是和 1 0000 0000 。
这样，如果想还原原来的数字只需要再异或 256 就可以了。

看起来有些复杂，其实我们也可以假设选中的时候，把它加上 256，这样它就不可能和其他字符相等了。如果假设失败了，再减去 256 就还原为原来的数字了。



public boolean exist(char[][] board, String word) {
    char[] w = word.toCharArray();
    for (int y=0; y<board.length; y++) {
    	for (int x=0; x<board[y].length; x++) {
    		if (exist(board, y, x, w, 0)) return true;
    	}
    }
    return false;
}

private boolean exist(char[][] board, int y, int x, char[] word, int i) {
	if (i == word.length) return true;
	if (y<0 || x<0 || y == board.length || x == board[y].length) return false;
	if (board[y][x] != word[i]) return false;
	board[y][x] ^= 256;
	boolean exist = exist(board, y, x+1, word, i+1)
		|| exist(board, y, x-1, word, i+1)
		|| exist(board, y+1, x, word, i+1)
		|| exist(board, y-1, x, word, i+1);
	board[y][x] ^= 256;
	return exist;
}


还有trie的做法
