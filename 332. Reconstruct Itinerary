1. BFS, stack
class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {
        LinkedList<String> ret = new LinkedList<String>();
        Map<String, PriorityQueue<String>> map = new HashMap<String, PriorityQueue<String>>();
        Stack<String> stack = new Stack<String>();
        for(List<String> t : tickets) {
            if(!map.containsKey(t.get(0))) map.put(t.get(0), new PriorityQueue<String>());
            map.get(t.get(0)).offer(t.get(1));
        }
        stack.push("JFK");
        while(!stack.isEmpty()) {
            String next = stack.peek();  //先不要pop， 因为priorityqueue还需要统计个数。
            if(map.containsKey(next) && map.get(next).size() > 0) stack.push(map.get(next).poll());
            else ret.addFirst(stack.pop());
        }
        return ret;
    }

}



2.
Just Eulerian path. Greedy DFS, building the route backwards when retreating.


class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String, PriorityQueue<String>> map = new HashMap<>();
        List<String> res = new LinkedList<String>();
        for (List<String> s : tickets) {
            map.computeIfAbsent(s.get(0), k -> new PriorityQueue<String>()).add(s.get(1));
            
        }

        
        Stack<String> st = new Stack<>();
        st.push("JFK");
        while(!st.isEmpty()){
            String src = st.peek();
            if(map.containsKey(src) && !map.get(src).isEmpty()){
                st.push(map.get(src).poll());
            }else{
                res.add(0,st.pop());
            }
        }
        return res;
    }
    
}
public List<String> findItinerary(String[][] tickets) {
    for (String[] ticket : tickets)
        targets.computeIfAbsent(ticket[0], k -> new PriorityQueue()).add(ticket[1]);
    visit("JFK");
    return route;
}

Map<String, PriorityQueue<String>> targets = new HashMap<>();
List<String> route = new LinkedList();

void visit(String airport) {
    while(targets.containsKey(airport) && !targets.get(airport).isEmpty())
        visit(targets.get(airport).poll());
    route.add(0, airport);
}
Iterative version:

public List<String> findItinerary(String[][] tickets) {
    Map<String, PriorityQueue<String>> targets = new HashMap<>();
    for (String[] ticket : tickets)
        targets.computeIfAbsent(ticket[0], k -> new PriorityQueue()).add(ticket[1]);
    List<String> route = new LinkedList();
    Stack<String> stack = new Stack<>();
    stack.push("JFK");
    while (!stack.empty()) {
        while (targets.containsKey(stack.peek()) && !targets.get(stack.peek()).isEmpty())
            stack.push(targets.get(stack.peek()).poll());
        route.add(0, stack.pop());
    }
    return route;
}
