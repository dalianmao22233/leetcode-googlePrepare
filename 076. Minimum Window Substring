acwing: 2个hashmap, hs存储s中的字符-出现次数，ht存储t中的字符-出现次数, count 存储计数，如果是有效的字符（满足t中出现的）就++
考虑窗口左右两个端点j, i
i: if     hs[s[i]] < ht[s[i]]， 说明此时的字符是有效的，count++
j: while  hs[s[j]] > ht[s[j]], 说明此时s[j]多余，hs[s[j]]--, j++.

2个hashmap能做，就是在移动j的时候需要考虑非常多的条件，麻烦，我没跑过，

这个更清楚， 两个int[128] 因为有大写字母，思想一样，而且数组不需要考虑containsKey问题：
    public String minWindow2(String s, String t) {
        int[] hs = new int[128];
        int[] ht = new int[128];
        
        
        for (Character c: t.toCharArray()) {
            ht[c]++;
        }
                  
        String res = "";
        int cnt = 0;
        for (int i = 0, j = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            hs[c]++;

            if (hs[c] <= ht[c]) {
                cnt++;
            }
            
            // j<= i, 防止越界
            while (j <= i && hs[s.charAt(j)] > ht[s.charAt(j)]) {
                hs[s.charAt(j)]--;
                j++;
            }   
            if (cnt == t.length()) {
                // i-j+1 是window
                if (res.isEmpty() || i-j+1 < res.length()) {
                    res = s.substring(j, i+1);
                }
            }
        }
        return res;
    }
    
}
