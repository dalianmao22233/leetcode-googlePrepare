// sliding window: Time: O(n) space: min(m, n)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int res = 0, start = 0, end = 0;
        while (start < n && end < n) {
            // try to extend the range [i, j]  需要举个例子才能懂 我总是忘记先看右边界是否在set中
            if (!set.contains(s.charAt(end))){
                set.add(s.charAt(end));
                res = Math.max(res, end - start+1);
                end++;
            } else {
                set.remove(s.charAt(start));
                start++;
            }
        }
        return res;
    }
}


优化：Solution, 用一个map记录，如果遇到重复的直接跳过去，不用一步一步计算。
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
