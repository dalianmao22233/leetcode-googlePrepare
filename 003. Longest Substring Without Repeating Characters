acwing:双指针，用数组来存储每个字符出现的次数，因为存在空格，用int[128] / int[256]
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) return 0;
        char[] a = s.toCharArray();
        int n = s.length();
        int[] st = new int[256];
        int res = 0;
        for (int i = 0, j = 0; i < n; i++) {
            st[a[i]]++;
            while (st[a[i]] > 1) {
                st[a[j]]--;
                j++;
            }
            res  = Math.max(res, i-j+1);
        }
        return res;
    }
}


// sliding window: Time: O(n) space: min(m, n)
s: -----j------------i---

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        
        int res = 0;
        
        for (int i = 0, j = 0; i < s.length(); i++) {
            int count = map.getOrDefault(s.charAt(i), 0);
            map.put(s.charAt(i), count+1);
            while (map.get(s.charAt(i))  > 1) {   // s.charAt(i)就是那个重复的字母
                int count_j = map.get(s.charAt(j));
                map.put(s.charAt(j), count_j-1); // 更新s.charAt(j) 在map中的记录，就是移除s.charAt(j)
                j++;
            }
            res = Math.max(res, i-j+1);
        }
        return res;
    }
}


优化：Solution, 用一个map记录，如果遇到重复的直接跳过去，不用一步一步计算。
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
