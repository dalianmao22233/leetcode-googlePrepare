类似post order traversal:

O(N)
class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> res = new ArrayList<Integer>();
        if (root == null) {
            return res;
        }
        Stack<Node> stack = new Stack<>();
        Set<Node> set = new HashSet<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            Node node = stack.peek();
            if (!set.contains(node)) {
                for (int i = node.children.size(); i > 0; i--) {
                    Node child = node.children.get(i-1);
                    stack.push(child);
                }
                set.add(node);
            } else {
                stack.pop();
                
                res.add(node.val);
              
            }
        }
        return res;
    }
}

=====================================================
class Solution {
  public List<Integer> postorder(Node root) {
    LinkedList<Node> stack = new LinkedList<>();
    LinkedList<Integer> output = new LinkedList<>();
    if (root == null) {
      return output;
    }

    stack.add(root);
    while (!stack.isEmpty()) {
      Node node = stack.pollLast();
      output.addFirst(node.val);
      for (Node item : node.children) {
        if (item != null) {
          stack.add(item);    
        } 
      }
    }
    return output;
  }
}
