1. // time exceed: Time: O(n^2), Space: O(n)
class Solution {
    public boolean isPalindrome(String s) {  // use leetcode valid palindrome answer
        for (int i = 0; i < s.length()/2; i++) {
           if (s.charAt(i) != s.charAt(s.length()-1-i)) {
               return false;
           } 
        }
        return true;
        
    }
    public boolean validPalindrome(String s) {
        StringBuilder sb = new StringBuilder(s);
        for (int i = 0; i < s.length(); i++) {
            char c = sb.charAt(i);
            sb.deleteCharAt(i);
            if (isPalindrome(sb.toString())) {
                return true;
            }
            sb.insert(i, c);
        }
        return isPalindrome(s);
    }
}

2. Greedy
// 首尾之间两个指针 0...i...j...END 
// 如果s[i] == s[j], continue
// 如果s[i+1] == s[j] || s[i] == s[j-1], continue, else return false; 贪心的本质是总有一个是满足的。
// i >= j，finish。
// Time: O(n) (看本质分析) Space: O(1)
class Solution {
    public boolean validPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        for (int i = 0; i < s.length(); i++) {
            int j = s.length()-1-i;
            if (s.charAt(i) == s.charAt(j)) {
                continue;
            } else {
                return isValid(s, i+1, j) || isValid(s, i, j-1);
            }
        }
        return true;
    }
    
    public boolean isValid(String s, int i, int j) {
        if (s == null || s.length() == 0) {
            return true;
        }
        while (i < j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
            } else {
                return false;
            }
        }
        return true;
    }
}
