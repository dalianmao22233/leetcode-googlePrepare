//  O(n*k^2) ： n words, k is word average len.
4种情况：
1. s1 是空， s2是回文， 那么s1+s2 or s2+s1是回文。
2. s2是s1的reverse，那么s1+s2 or s2+s1是回文。
3. s1[0:cut] 是回文，s2=s1[cut+1:]的reverse, 那么s2+s1是回文: s1="abadef", s2="fed", s2+s1="fedabadef"
4. s1[cut+1:]是回文，s2是s1[0:cut]的reverse, 那么s1+s2是回文: s1="defaba", s2="fed", s1+s2="defabafed"
建立一个hashmap来存string-index的键值对。

public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(words == null || words.length == 0){
            return res;
        }
        //build the map save the key-val pairs: String - idx
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++){
            map.put(words[i], i);
        }

        //special cases: "" can be combine with any palindrome string
        if(map.containsKey("")){
            int blankIdx = map.get("");
            for(int i = 0; i < words.length; i++){
                if(isPalindrome(words[i])){
                    if(i == blankIdx) continue;
                    res.add(Arrays.asList(blankIdx, i));
                    res.add(Arrays.asList(i, blankIdx));
                }
            }
        }

        //find all string and reverse string pairs
        for(int i = 0; i < words.length; i++){
            String cur_r = reverseStr(words[i]);
            if(map.containsKey(cur_r)){
                int found = map.get(cur_r);
                if(found == i) continue;
                res.add(Arrays.asList(i, found));
            }
        }

        //find the pair s1, s2 that 
        //case1 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)
        //case2 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)
        for(int i = 0; i < words.length; i++){
            String cur = words[i];
            for(int cut = 1; cut < cur.length(); cut++){
                if(isPalindrome(cur.substring(0, cut))){
                    String cut_r = reverseStr(cur.substring(cut));
                    if(map.containsKey(cut_r)){
                        int found = map.get(cut_r);
                        if(found == i) continue;
                        res.add(Arrays.asList(found, i));
                    }
                }
                if(isPalindrome(cur.substring(cut))){
                    String cut_r = reverseStr(cur.substring(0, cut));
                    if(map.containsKey(cut_r)){
                        int found = map.get(cut_r);
                        if(found == i) continue;
                        res.add(Arrays.asList(i, found));
                    }
                }
            }
        }

        return res;
    }

    public String reverseStr(String str){
        StringBuilder sb= new StringBuilder(str);
        return sb.reverse().toString();
    }

    public boolean isPalindrome(String s){
        int i = 0;
        int j = s.length() - 1;
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}


=====================================================
// Trie:
class Solution {
    class TrieNode {
			TrieNode[] next;
			int index;
			List<Integer> list;

			TrieNode() {
				next = new TrieNode[26];
				index = -1;
				list = new ArrayList<>();
			}
		}

		private void addWord(TrieNode root, String word, int index) {
			for (int i = word.length() - 1; i >= 0; i--) {
				if (root.next[word.charAt(i) - 'a'] == null) {
					root.next[word.charAt(i) - 'a'] = new TrieNode();
				}

				if (isPalindrome(word, 0, i)) {
					root.list.add(index);
				}

				root = root.next[word.charAt(i) - 'a'];
			}

			root.list.add(index);
			root.index = index;
		}

		private boolean isPalindrome(String word, int i, int j) {
			while (i < j) {
				if (word.charAt(i++) != word.charAt(j--)) return false;
			}

			return true;
		}

		private void search(String[] words, int i, TrieNode root, List<List<Integer>> list) {
			for (int j = 0; j < words[i].length(); j++) {
				if (root.index >= 0 && root.index != i && isPalindrome(words[i], j, words[i].length() - 1)) {
					list.add(Arrays.asList(i, root.index));
				}

				root = root.next[words[i].charAt(j) - 'a'];
				if (root == null) return;
			}

			for (int j : root.list) {
				if (i == j) continue;
				list.add(Arrays.asList(i, j));
			}
		}

		public List<List<Integer>> palindromePairs(String[] words) {
			List<List<Integer>> res = new ArrayList<>();

			TrieNode root = new TrieNode();
			for (int i = 0; i < words.length; i++) {
				addWord(root, words[i], i);
			}

			for (int i = 0; i < words.length; i++) {
				search(words, i, root, res);
			}

			return res;
		}
}
