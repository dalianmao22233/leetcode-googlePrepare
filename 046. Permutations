1. // 通常做法：适用于数组中有不重复的元素
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        helper(nums, res, new ArrayList<Integer>());
        return res;
    }
    private void helper(final int[] nums, List<List<Integer>> res, List<Integer> answer) {
        if (answer.size() == nums.length) {
            res.add(new ArrayList(answer));
            /**
            Writing new ArrayList<>(list) creates a new list, containing all the elements in list. 
            This is required, since at the end of the function you are calling list.remove(list.size()-1);, 
            you are thus modifying the list variable.

            If you were to add list directly in res, the remove call would also modify res
            */
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (answer.contains(nums[i])) {
                continue;
            }
            answer.add(nums[i]);
            helper(nums, res, answer);
            answer.remove(answer.size()-1);
        }
    }
}

or 加一个visited 数组来记录是否用过当前数字:  适用于有重复元素的数组，比1快，contains是遍历一遍数组，但是这种方法不用遍历。用不用Level当参数都一样。

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        boolean[] visited = new boolean[nums.length];
        dfs(nums, res, new ArrayList<Integer>(), visited);
        return res;
    }
    private void dfs(int[] nums, List<List<Integer>> res, List<Integer> answer, boolean[] visited) {
        if (answer.size() == nums.length) {
            res.add(new ArrayList<>(answer));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == false) {
                answer.add(nums[i]);
                visited[i] = true;
                dfs(nums, res, answer, visited);
                visited[i] = false;
                answer.remove(answer.size()-1);
            }
        }
    }
}

2. Inplace-- laioffer: 固定index, [1,2,3]，固定1不动，swap 2和3  看笔记

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        helper(nums, res, new ArrayList<Integer>(), 0);
        return res;
    }
    private void helper(final int[] nums, List<List<Integer>> res, List<Integer> answer, int index) {
        if (answer.size() == nums.length) {
            res.add(new ArrayList(answer));
            return;
        }
        for (int i = index; i < nums.length; i++) {
            answer.add(nums[i]);
            swap(nums, index, i);
            helper(nums, res, answer, index+1);
            swap(nums, i, index);
            answer.remove(answer.size()-1);
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

优化：
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        if (nums==null || nums.length==0) { return ans; }
        permute(ans, nums, 0);
        return ans;
    }
    
    private void permute(List<List<Integer>> ans, int[] nums, int index) {
        if (index == nums.length) { 
            List<Integer> temp = new ArrayList<>();
            for (int num: nums) { temp.add(num); }
            ans.add(temp);
            return;
        }
        // 这句可以没有，在permutation II 里是必须的 Set<Integer> appeared = new HashSet<>();
        for (int i=index; i<nums.length; ++i) {
           // 同上 if (appeared.add(nums[i])) {
                swap(nums, index, i);
                permute(ans, nums, index+1);
                swap(nums, index, i);
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int save = nums[i];
        nums[i] = nums[j];
        nums[j] = save;
    }
}
