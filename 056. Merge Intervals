扫描线做法：配合新的输入输出形式int[][], comparator 重写。
class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return intervals;
        }
        Collections.sort(Arrays.asList(intervals), new IntervalComparator());
        
        LinkedList<int[]> merged = new LinkedList<>();
        for(int[] interval: intervals) {
            if (merged.isEmpty() || merged.getLast()[1] < interval[0]) {
                merged.add(interval);
            } else {
                merged.getLast()[1] = Math.max(merged.getLast()[1], interval[1]);
            }
        }
        return merged.toArray(new int[merged.size()][]);
    }
    private class IntervalComparator implements Comparator<int[]> {
        @Override
        public int compare(int[] a, int[] b) {
            return a[0]<b[0] ? -1: a[0]==b[0] ? 0 : 1;
        }
    }
}


leetcode换了输出格式：https://leetcode.com/problems/merge-intervals/solution/
class Solution {
  private class IntervalComparator implements Comparator<int[]> {
    @Override
    public int compare(int[] a, int[] b) {
      return a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1;
    }
  }

  public int[][] merge(int[][] intervals) {
    Collections.sort(Arrays.asList(intervals), new IntervalComparator());

    LinkedList<int[]> merged = new LinkedList<>();
    for (int[] interval : intervals) {
      // if the list of merged intervals is empty or if the current
      // interval does not overlap with the previous, simply append it.
      if (merged.isEmpty() || merged.getLast()[1] < interval[0]) {
        merged.add(interval);
      }
      // otherwise, there is overlap, so we merge the current and previous
      // intervals.
      else {
        merged.getLast()[1] = Math.max(merged.getLast()[1], interval[1]);
      }
    }

    return merged.toArray(new int[merged.size()][]);
  }
}
============================
public class MergeInterval {
	public static class Interval {
		int start; int end;
		Interval() {
			start = 0;
			end = 0;
		}
		Interval(int s, int e) {
			start = s;
			end = e;
		}
	}

	// Sorting:
	
	public List<Interval> merge(List<Interval> intervals) {
        List<Interval> res = new ArrayList<>();
		if (intervals == null || intervals.size() == 0) {
			return res;
		}
		PriorityQueue<Interval> pq = new PriorityQueue<Interval>(intervals.size(), new Comparator<Interval>() {
			@Override
			public int compare(Interval i1, Interval i2) {
				if (i1.start == i2.start) {
					return 0;
				}
				return i1.start < i2.start ? -1 : 1;
			}
		});
		
		//可以直接用Collections.sort(intervals, new Comparator<Interval>()..... 不用for加入pq了。
		for (Interval i : intervals) {
			pq.offer(i);
		}
		while (!pq.isEmpty()) {  //注意这里不能直接循环。for(i: pq), pq里没有顺序，是拿出来的时候有顺序。
			Interval i = pq.poll();
			if (res.isEmpty() || res.get(res.size()-1).end < i.start) { //不冲突的情况下直接加入。
				res.add(i);
			} else {
				res.get(res.size()-1).end = Math.max(i.end, res.get(res.size()-1).end);  // 冲突的时候取最大的end.
			}
		}
		return res;
    }

	public static List<Interval> merge1(List<Interval> intervals) {
		Collections.sort(intervals, new Comparator<Interval>() {
			@Override
			public int compare(Interval a, Interval b) {
				return a.start < b.start ? -1 : a.start == b.start ? 0 : 1;
			}
		});

		LinkedList<Interval> merged = new LinkedList<Interval>();
		for (Interval interval : intervals) {
			// if the list of merged intervals is empty or if the current
			// interval does not overlap with the previous, simply append it.
			if (merged.isEmpty() || merged.getLast().end < interval.start) {
				merged.add(interval);
			}
			// otherwise, there is overlap, so we merge the current and previous
			// intervals.
			else {
				merged.getLast().end = Math.max(merged.getLast().end, interval.end);
			}
		}

		return merged;
	}

	// 扫描线做法：O(nlogn)
	public static List<Interval> merge2(List<Interval> intervals) {
		if(intervals == null || intervals.size() <= 1) return intervals;
		Collections.sort(intervals, (a, b) -> a.start - b.start);
		int start = intervals.get(0).start;
		int end = intervals.get(0).end;
		List<Interval> res = new ArrayList<>();
		for (Interval interval : intervals) {
			if (interval.start <= end) {
				end = Math.max(end, interval.end);
			} else {
				res.add(new Interval(start, end));
				start = interval.start;
				end = interval.end;
			}
		}
		res.add(new Interval(start, end));//key point here dont forget to add this line
		return res;
	}
}
