class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
     
        dfs(res, new ArrayList<Integer>(), k, n, 1);
        return res;
    }
    public void dfs(List<List<Integer>> res, List<Integer> ans, int count, int sum, int start) {
        if (ans.size() == count) {
            if (sum == 0) {
                res.add(new ArrayList<>(ans));
            }
            return;
        }
        
        for (int i = start; i <= 9; i++) {      // 从start开始 确保了么有重复使用的数字，而且是一共之后9个分叉，不会是81个。
            ans.add(i);
            dfs(res, ans, count, sum-i, i+1);
            ans.remove(ans.size()-1);
        }
    }
}
