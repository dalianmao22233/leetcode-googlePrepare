1和2会做了，这个就会了，很简单。

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (k <= 0) {
            return res;
        }
        if (k > n) {
            return res;
        }
        dfs(k, n, res, new ArrayList<>(), 1);
        return res;
    }
    public void dfs(int k, int n, List<List<Integer>> res, List<Integer> ans, int level) {
        if (k == ans.size()) {
            int sum = 0;
            for (int m : ans) {
                sum += m;
            }
            if (sum == n) {
                res.add(new ArrayList<>(ans));
            }
            return;
        }
        for (int i = level; i <= 9; i++) {
            ans.add(i);
            dfs(k, n, res, ans, i+1);
            ans.remove(ans.size()-1);
        }
    }
}
