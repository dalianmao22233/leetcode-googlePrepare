package Facebook;
//76

import java.util.HashMap;
import java.util.Map;

public class MinWindowSubstring {
//	Input: S = "ADOBECODEBANC", T = "ABC"
//	Output: "BANC"

	// Time Complexity: O(|S| + |T|) where |S| and |T| represent the lengths of strings S and T.
	// In the worst case we might end up visiting every element of string S twice,
	// once by left pointer and once by right pointer.
	// ∣T∣ represents the length of string T.

	// Space Complexity: O(|S| + |T|)
	// |S| when the window size is equal to the entire string S. |T| when T has all unique characters.

	public static String minWindow(String s, String t) {

		if (s.length() == 0 || t.length() == 0) {
			return "";
		}

		// Dictionary which keeps a count of all the unique characters in t.
		Map<Character, Integer> dictT = new HashMap<Character, Integer>();
		for (int i = 0; i < t.length(); i++) {
			int count = dictT.getOrDefault(t.charAt(i), 0);
			dictT.put(t.charAt(i), count + 1);
		}

		// Number of unique characters in t, which need to be present in the desired window.
		int required = dictT.size();

		// Left and Right pointer
		int l = 0, r = 0;

		// formed is used to keep track of how many unique characters in t
		// are present in the current window in its desired frequency.
		// e.g. if t is "AABC" then the window must have two A's, one B and one C.
		// Thus formed would be = 3 when all these conditions are met.
		int formed = 0;

		// Dictionary which keeps a count of all the unique characters in the current window.
		Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();

		// ans list of the form (window length, left, right)
		int[] ans = {-1, 0, 0};

		while (r < s.length()) {
			// Add one character from the right to the window
			char c = s.charAt(r);
			int count = windowCounts.getOrDefault(c, 0);
			windowCounts.put(c, count + 1);

			// If the frequency of the current character added equals to the
			// desired count in t then increment the formed count by 1.
			if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
				formed++;
			}

			// Try and contract the window till the point where it ceases to be 'desirable'.
			while (l <= r && formed == required) {
				c = s.charAt(l);
				// Save the smallest window until now.
				if (ans[0] == -1 || r - l + 1 < ans[0]) {
					ans[0] = r - l + 1;
					ans[1] = l;
					ans[2] = r;
				}

				// The character at the position pointed by the
				// `Left` pointer is no longer a part of the window.
				windowCounts.put(c, windowCounts.get(c) - 1);
				if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
					formed--;
				}

				// Move the left pointer ahead, this would help to look for a new window.
				l++;
			}

			// Keep expanding the window once we are done contracting.
			r++;
		}

		return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
	}

	public static void main(String[] args) {
		System.out.println(minWindow("ADOBECODEBANC", "ABC"));
	}
}




快！
//version 2: two pointers + one int[]
// array access is much faster than hashmap: 9s  VS 55s
public class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || t.length() > s.length()) {
            return "";
        }
        int[] map = new int[256];
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            map[c]++;
        }
        int l = 0, r = 0, match = 0; 
        int minLeft = -1, minLen = Integer.MAX_VALUE;
        while (r < s.length()) {
            char cr = s.charAt(r);
            if (--map[cr] >= 0) match++;
            while (match == t.length()) {
                if (r - l + 1 < minLen) {
                    minLeft = l;
                    minLen = Math.min(minLen, r - l + 1);
                }
                char cl = s.charAt(l);
                if (++map[cl] > 0) match--;
                ++l;
            }
            ++r;
        }
        return minLeft == -1 ? "" : s.substring(minLeft, minLeft + minLen);
    }
}



// version 1, two pointers + one hashmap
// General template like Problems 3, 159, ....
/*public class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || t.length() > s.length()) {
            return "";
        }
        Map<Character, Integer> tMap = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }
        int left = 0, right = 0, count = 0; 
        int minStart = -1, minLen = Integer.MAX_VALUE;
        while (right < s.length()) {
            char cr = s.charAt(right);
            tMap.put(cr, tMap.getOrDefault(cr, 0) - 1);
            if (tMap.get(cr) >= 0) count++;
            while (count == t.length()) {
                if (right - left + 1 <= minLen) {
                    minStart = left;
                    minLen = right - left + 1; 
                }
                char cl = s.charAt(left++);
                tMap.put(cl, tMap.get(cl) + 1);
                if (tMap.get(cl) >= 1) count--;
            }
            right++;
        }
        return minStart == -1 ? "" : s.substring(minStart, minStart + minLen);
    }
} */
