// 1D dp.在最右端向左看，比如0-1-2-3 stairs, 需要知道从0-2 和 0-1 有几种方式，1-3 和 2-3 只有一种方式 （走一步还是走两步）。 是斐波那契
class Solution {
    public int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return n;
        }
        int[] M = new int[n+1];
        if (n == 2) {
            return 2;
        }
        M[0] = 0;
        M[1] = 1;
        M[2] = 2;
        for (int i = 3; i <= n; i++) {
            M[i] = M[i-1] + M[i-2];
        }
        return M[n];
    }
}
节省空间：dp 斐波那契
public class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int first = 1;
        int second = 2;
        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }
        return second;
    }
}

recursion: time: O(2^n), space:O(n), depth of tree: n
public class Solution {
    public int climbStairs(int n) {
        climb_Stairs(0, n);
    }
    public int climb_Stairs(int i, int n) {
        if (i > n) {
            return 0;
        }
        if (i == n) {
            return 1;
        }
        return climb_Stairs(i + 1, n) + climb_Stairs(i + 2, n);
    }
}

优化recursion： 加memorization： time: O(n) recursion tree size 最多是n, space: O(n) recursion tree深度最多是n
public class Solution {
    public int climbStairs(int n) {
        int memo[] = new int[n + 1];
        return climb_Stairs(0, n, memo);
    }
    public int climb_Stairs(int i, int n, int memo[]) {
        if (i > n) {
            return 0;
        }
        if (i == n) {
            return 1;
        }
        if (memo[i] > 0) {
            return memo[i];
        }
        memo[i] = climb_Stairs(i + 1, n, memo) + climb_Stairs(i + 2, n, memo);
        return memo[i];
    }
}
