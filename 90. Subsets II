1. dfs + backtracking:
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        Arrays.sort(nums);
        dfs(res, new ArrayList<>(), nums, 0);
        return res;
    }
    public void dfs(List<List<Integer>> res, List<Integer> ans, int[] nums, int pos) {
        if (ans.size() <= nums.length) {
            res.add(new ArrayList<>(ans));
        }
        for (int i = pos; i < nums.length; i++) {
            if (i > pos && nums[i] == nums[i-1]) {
                continue;
            }
            ans.add(nums[i]);
            dfs(res, ans, nums, i+1);
            ans.remove(ans.size()-1);
        }
    }
}

2. DP:
public List<List<Integer>> subsetsWithDup(int[] nums) {
    Arrays.sort(nums);
	List<List<Integer>> result = new ArrayList<List<Integer>>();
	result.add(new ArrayList<Integer>());
	int begin = 0;
	for(int i = 0; i < nums.length; i++){
		if(i == 0 || nums[i] != nums[i - 1]) begin = 0;
		int size = result.size();
		for(int j = begin; j < size; j++){
			List<Integer> cur = new ArrayList<Integer>(result.get(j));
			cur.add(nums[i]);
			result.add(cur);
		}
		begin = size;
	}
	return result;
}
