class Solution {
        public int maxPoints(int[][] points) {
            if (points == null) return 0;
            if (points.length <= 2) return points.length;
            int max = 2;
            for (int i = 0; i < points.length; i++) {
                int dupPoints = 0;
                for (int j = i + 1; j < points.length; j++) {
                    int numPts = 1;
                    int x1 = points[i][0], y1 = points[i][1], x2 = points[j][0], y2 = points[j][1];
                    if (x1 == x2 && y1 == y2) {
                        max = Math.max(max, ++dupPoints + numPts);
                        continue;
                    } else {
                        max = Math.max(max, dupPoints + ++numPts);
                    }
                    for (int k = j + 1; k < points.length; k++) {
                        int x3 = points[k][0], y3 = points[k][1];
                        if ((long) (y2 - y1) * (x3 - x2) == (long) (y3 - y2) * (x2 - x1)) max = Math.max(max, ++numPts + dupPoints);
                    }
                }
            }
            return max;
        }
    }
