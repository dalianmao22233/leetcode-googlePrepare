// 用 hashmap 跟踪 the keys and its values in the double linked list. 
// double linked list 特点：the node can remove itself without other reference. 
// 而且 it takes O(1) to add and remove nodes from the head or tail.

// create a pseudo head and tail to mark the boundary, 
// so that we don't need to check the NULL node during the update. 

// if the size of k is relatively large, a singly linked list is more practical due to a lower rate on memory overhead
// (删除的时候麻烦，不知道node 之前的是谁，没法断开连接。)
class LRUCache {
    class DLinkedNode{
        int key;
        int value;
        DLinkedNode prev;
        DLinkedNode next;
    }
    
    // add new node after head, head(N1) <-> node <-> N2
    private void addNode(DLinkedNode node) {
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }
    
    // remove node from linkedlist 
    private void removeNode(DLinkedNode node) {
        DLinkedNode prev = node.prev;
        DLinkedNode next = node.next;
        prev.next = next;
        next.prev = prev;
    }
    
    // move certain node in between to head
    private void moveToHead(DLinkedNode node) {
        this.removeNode(node);
        this.addNode(node);
    }
    
    // pop the current tail
    private DLinkedNode popTail() {
        DLinkedNode res = tail.prev;
        this.removeNode(res);
        return res;
    }
    
    private HashMap<Integer, DLinkedNode> cache = new HashMap<>();
    private int count;
    private int capacity;
    private DLinkedNode head, tail;
    
    
    public LRUCache(int capacity) {
        this.count = 0;
        this.capacity = capacity;
        
        head = new DLinkedNode();
        head.prev = null;
        
        tail = new DLinkedNode();
        tail.next = null;
        
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        DLinkedNode node = cache.get(key);
        if (node == null) {
            return -1; // raise exception here
        }
        // move accessed node to head;
        this.moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        DLinkedNode node = cache.get(key);
        
        if (node == null) {
            DLinkedNode newNode = new DLinkedNode();
            newNode.key = key;
            newNode.value = value;
            
            this.cache.put(key, newNode);
            this.addNode(newNode);
            
            count++;
            if (count > capacity) {
                // pop the tail
                DLinkedNode tail = this.popTail();
                this.cache.remove(tail.key);
                count--;
            }
        } else {
            // update the value
            node.value = value;
            // put after head
            this.moveToHead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */



============================
另一种：

class LRUCache {

    class Node {
		int key;
		int value;
		Node next;
		Node pre;
		public Node(int key, int value) {
			this.key = key;
			this.value = value;
		}
	}

	private HashMap<Integer, Node> map;
	private int capacity;
	private Node head;
	private Node tail;

	public LRUCache(int capacity) {
		map = new HashMap<>();
		this.capacity = capacity;
		head = null;
		tail = null;
	}

	public int get(int key) {
		Node node = map.get(key);
		if (node == null) {
			return -1;
		}
		if (node != tail) {
			if (node == head) {
				head = head.next;
			} else {
				node.pre.next = node.next;
				node.next.pre = node.pre;
			}
			tail.next = node;
			node.pre = tail;
			node.next = null;
			tail = node;
		}
		return node.value;
	}

	public void put(int key, int value) {
		Node node = map.get(key);//判断hashmap里有没有这个key，存在的话node不为null，不存在的话node为null
		if (node != null) {
			node.value = value;
			if (node != tail) {//那node就要从head的位置变到tail了 变成最新的位置
				if (node == head) {
					head = head.next;
				} else {//new node等于tail的时候 不需要重新排序 因为tail已经是最新的位置了
					node.pre.next = node.next;
					node.next.pre = node.pre;
				}
				tail.next = node;
				node.pre = tail;
				node.next = null;
				tail = node;
			}
		} else {//node为空，hashmap里没有这个key，建立一个新node
			Node newNode = new Node(key, value);//建立一个新node,并把key，value值放进去
			if (capacity == 0) {//需要移除一个元素，然后再把新node加进去
				Node temp = head;//删掉head处的元素
				head = head.next;
				map.remove(temp.key);
				capacity++;
			}
			if (head == null && tail == null) {//整个都是空的 里面一个元素都没有
				head = newNode;//new node直接就可以当head啦
			} else {
				tail.next = newNode;
				newNode.pre = tail;
				newNode.next = null;
			}
			tail = newNode;
			map.put(key, newNode);
			capacity--;
		}
	}
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
