followup:
num2太大了，不能全都load在disk上， 怎么办？

basically there are three ideas to solve the question:

Store the two strings in distributed system(whether self designed or not), then using MapReduce technique to solve the problem;

Processing the Strings by chunk, which fits the memory, then deal with each chunk of data at a time;

Processing the Strings by streaming, then check.


If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.

If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.



class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0) {
            return new int[0];
        }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        List<Integer> res = new ArrayList<>();
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                res.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[res.size()];
        int k = 0;
        for (Integer num : res) {
            result[k++] = num;
        }
        return result;
    }
}


我的暴力：
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0) {
            return new int[0];
        }
        int len1 = nums1.length;
        int len2 = nums2.length;
         
        List<Integer> res = new ArrayList<>();
        HashMap<Integer, Integer> map=  new HashMap<>();
        for (int i = 0; i < len1; i++) {
            map.put(nums1[i], map.getOrDefault(nums1[i], 0)+1);
        }
        for (int j = 0; j < len2; j++) {
            if (map.containsKey(nums2[j])) {
                res.add(nums2[j]);
                map.put(nums2[j], map.get(nums2[j])-1);
                if (map.get(nums2[j]) == 0) {
                    map.remove(nums2[j]);
                }
            }
        }
        int[] arr = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            arr[i] = res.get(i);
        } 
        return arr;
    }
}
