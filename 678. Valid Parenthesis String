1. 贪心算法：time: O(n), space: O(1)
low:处理完当前字符后 最少的'('个数
high:处理完当前字符后 最多的'('个数

public boolean checkValidString(String s) {
   int lo = 0, hi = 0;
   for (char c: s.toCharArray()) {
       lo += c == '(' ? 1 : -1;
       hi += c != ')' ? 1 : -1;
       if (hi < 0) break;
       lo = Math.max(lo, 0);
   }
   return lo == 0;
}


2. DP: time: O(n^3), space: O(n^2)
public boolean checkValidString(String s) {
    int n = s.length();
    if (n == 0) return true;
    boolean[][] dp = new boolean[n][n];
    // dp[i][j] 代表 到i-j是否为valid
    // 1. s[i] == '*', i+1~j为valid
    // 2. s[i] == '(', i+1~j之间有个k, s[k] == ')',使得 s[i+1:k] 和 s[k+1, j+1] valid

    for (int i = 0; i < n; i++) {
        if (s.charAt(i) == '*') dp[i][i] = true;
        if (i < n-1 &&
                (s.charAt(i) == '(' || s.charAt(i) == '*') &&
                (s.charAt(i+1) == ')' || s.charAt(i+1) == '*')) {
            dp[i][i+1] = true;
        }
    }

    for (int size = 2; size < n; size++) {
        for (int i = 0; i + size < n; i++) {
            if (s.charAt(i) == '*' && dp[i+1][i+size] == true) {
                dp[i][i+size] = true;
            } else if (s.charAt(i) == '(' || s.charAt(i) == '*') {
                for (int k = i+1; k <= i+size; k++) {
                    if ((s.charAt(k) == ')' || s.charAt(k) == '*') &&
                            (k == i+1 || dp[i+1][k-1]) &&
                            (k == i+size || dp[k+1][i+size])) {
                        dp[i][i+size] = true;
                    }
                }
            }
        }
    }
    return dp[0][n-1];
}


3. 暴力
time：O(n* 3^n), space: O(n)
For each asterisk we try 3 different values.

class Solution {
    boolean ans = false;

    public boolean checkValidString(String s) {
        solve(new StringBuilder(s), 0);
        return ans;
    }

    public void solve(StringBuilder sb, int i) {
        if (i == sb.length()) {
            ans |= valid(sb);
        } else if (sb.charAt(i) == '*') {
            for (char c: "() ".toCharArray()) {
                sb.setCharAt(i, c);
                solve(sb, i+1);
                if (ans) return;
            }
            sb.setCharAt(i, '*');
        } else
            solve(sb, i + 1);
    }

    public boolean valid(StringBuilder sb) {
        int bal = 0;
        for (int i = 0; i < sb.length(); i++) {
            char c = sb.charAt(i);
            if (c == '(') bal++;
            if (c == ')') bal--;
            if (bal < 0) break;
        }
        return bal == 0;
    }
}
