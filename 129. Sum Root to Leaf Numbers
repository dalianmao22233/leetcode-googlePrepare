1. recursion: 我想到了这个，可是犹豫了传参问题
class Solution {
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return sum(root, 0);
    }
    public int sum(TreeNode root, int s) {
        if (root == null) {
            return 0;  
        }
        if (root.left == null && root.right == null) {
            return s * 10 + root.val;
        }
        return sum(root.left, s * 10 + root.val) + sum(root.right, s * 10 + root.val);
    }
}


2. // bfs iteratively 
import javafx.util.Pair;
public int sumNumbers(TreeNode root) {
    int ret = 0;
    Queue<Pair<TreeNode, Integer>> queue = new LinkedList<>();
    queue.add(new Pair(root, 0));
    while (!queue.isEmpty()) {
        Pair<TreeNode, Integer> p = queue.poll();
        TreeNode node = p.getKey();
        int value = p.getValue();
        if (node != null) {
            value = value * 10 + node.val;
            if (node.left == null && node.right == null) {
                ret += value;
            }
            queue.add(new Pair(node.left, value));
            queue.add(new Pair(node.right, value));
        }
    }
    return ret;
}
